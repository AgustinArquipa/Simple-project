/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/flatpickr/dist/esm/index.js":
/*!**************************************************!*\
  !*** ./node_modules/flatpickr/dist/esm/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _types_options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types/options */ \"./node_modules/flatpickr/dist/esm/types/options.js\");\n/* harmony import */ var _l10n_default__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./l10n/default */ \"./node_modules/flatpickr/dist/esm/l10n/default.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"./node_modules/flatpickr/dist/esm/utils/index.js\");\n/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/dom */ \"./node_modules/flatpickr/dist/esm/utils/dom.js\");\n/* harmony import */ var _utils_dates__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/dates */ \"./node_modules/flatpickr/dist/esm/utils/dates.js\");\n/* harmony import */ var _utils_formatting__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/formatting */ \"./node_modules/flatpickr/dist/esm/utils/formatting.js\");\n/* harmony import */ var _utils_polyfills__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/polyfills */ \"./node_modules/flatpickr/dist/esm/utils/polyfills.js\");\n/* harmony import */ var _utils_polyfills__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_utils_polyfills__WEBPACK_IMPORTED_MODULE_6__);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst DEBOUNCED_CHANGE_MS = 300;\r\nfunction FlatpickrInstance(element, instanceConfig) {\r\n    const self = {\r\n        config: Object.assign(Object.assign({}, _types_options__WEBPACK_IMPORTED_MODULE_0__.defaults), flatpickr.defaultConfig),\r\n        l10n: _l10n_default__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\r\n    };\r\n    self.parseDate = (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.createDateParser)({ config: self.config, l10n: self.l10n });\r\n    self._handlers = [];\r\n    self.pluginElements = [];\r\n    self.loadedPlugins = [];\r\n    self._bind = bind;\r\n    self._setHoursFromDate = setHoursFromDate;\r\n    self._positionCalendar = positionCalendar;\r\n    self.changeMonth = changeMonth;\r\n    self.changeYear = changeYear;\r\n    self.clear = clear;\r\n    self.close = close;\r\n    self._createElement = _utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement;\r\n    self.destroy = destroy;\r\n    self.isEnabled = isEnabled;\r\n    self.jumpToDate = jumpToDate;\r\n    self.open = open;\r\n    self.redraw = redraw;\r\n    self.set = set;\r\n    self.setDate = setDate;\r\n    self.toggle = toggle;\r\n    function setupHelperFunctions() {\r\n        self.utils = {\r\n            getDaysInMonth(month = self.currentMonth, yr = self.currentYear) {\r\n                if (month === 1 && ((yr % 4 === 0 && yr % 100 !== 0) || yr % 400 === 0))\r\n                    return 29;\r\n                return self.l10n.daysInMonth[month];\r\n            },\r\n        };\r\n    }\r\n    function init() {\r\n        self.element = self.input = element;\r\n        self.isOpen = false;\r\n        parseConfig();\r\n        setupLocale();\r\n        setupInputs();\r\n        setupDates();\r\n        setupHelperFunctions();\r\n        if (!self.isMobile)\r\n            build();\r\n        bindEvents();\r\n        if (self.selectedDates.length || self.config.noCalendar) {\r\n            if (self.config.enableTime) {\r\n                setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj : undefined);\r\n            }\r\n            updateValue(false);\r\n        }\r\n        setCalendarWidth();\r\n        const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n        if (!self.isMobile && isSafari) {\r\n            positionCalendar();\r\n        }\r\n        triggerEvent(\"onReady\");\r\n    }\r\n    function bindToInstance(fn) {\r\n        return fn.bind(self);\r\n    }\r\n    function setCalendarWidth() {\r\n        const config = self.config;\r\n        if (config.weekNumbers === false && config.showMonths === 1) {\r\n            return;\r\n        }\r\n        else if (config.noCalendar !== true) {\r\n            window.requestAnimationFrame(function () {\r\n                if (self.calendarContainer !== undefined) {\r\n                    self.calendarContainer.style.visibility = \"hidden\";\r\n                    self.calendarContainer.style.display = \"block\";\r\n                }\r\n                if (self.daysContainer !== undefined) {\r\n                    const daysWidth = (self.days.offsetWidth + 1) * config.showMonths;\r\n                    self.daysContainer.style.width = daysWidth + \"px\";\r\n                    self.calendarContainer.style.width =\r\n                        daysWidth +\r\n                            (self.weekWrapper !== undefined\r\n                                ? self.weekWrapper.offsetWidth\r\n                                : 0) +\r\n                            \"px\";\r\n                    self.calendarContainer.style.removeProperty(\"visibility\");\r\n                    self.calendarContainer.style.removeProperty(\"display\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n    function updateTime(e) {\r\n        if (self.selectedDates.length === 0) {\r\n            const defaultDate = self.config.minDate === undefined ||\r\n                (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.compareDates)(new Date(), self.config.minDate) >= 0\r\n                ? new Date()\r\n                : new Date(self.config.minDate.getTime());\r\n            const defaults = (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.getDefaultHours)(self.config);\r\n            defaultDate.setHours(defaults.hours, defaults.minutes, defaults.seconds, defaultDate.getMilliseconds());\r\n            self.selectedDates = [defaultDate];\r\n            self.latestSelectedDateObj = defaultDate;\r\n        }\r\n        if (e !== undefined && e.type !== \"blur\") {\r\n            timeWrapper(e);\r\n        }\r\n        const prevValue = self._input.value;\r\n        setHoursFromInputs();\r\n        updateValue();\r\n        if (self._input.value !== prevValue) {\r\n            self._debouncedChange();\r\n        }\r\n    }\r\n    function ampm2military(hour, amPM) {\r\n        return (hour % 12) + 12 * (0,_utils__WEBPACK_IMPORTED_MODULE_2__.int)(amPM === self.l10n.amPM[1]);\r\n    }\r\n    function military2ampm(hour) {\r\n        switch (hour % 24) {\r\n            case 0:\r\n            case 12:\r\n                return 12;\r\n            default:\r\n                return hour % 12;\r\n        }\r\n    }\r\n    function setHoursFromInputs() {\r\n        if (self.hourElement === undefined || self.minuteElement === undefined)\r\n            return;\r\n        let hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24, minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60, seconds = self.secondElement !== undefined\r\n            ? (parseInt(self.secondElement.value, 10) || 0) % 60\r\n            : 0;\r\n        if (self.amPM !== undefined) {\r\n            hours = ampm2military(hours, self.amPM.textContent);\r\n        }\r\n        const limitMinHours = self.config.minTime !== undefined ||\r\n            (self.config.minDate &&\r\n                self.minDateHasTime &&\r\n                self.latestSelectedDateObj &&\r\n                (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.compareDates)(self.latestSelectedDateObj, self.config.minDate, true) ===\r\n                    0);\r\n        const limitMaxHours = self.config.maxTime !== undefined ||\r\n            (self.config.maxDate &&\r\n                self.maxDateHasTime &&\r\n                self.latestSelectedDateObj &&\r\n                (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.compareDates)(self.latestSelectedDateObj, self.config.maxDate, true) ===\r\n                    0);\r\n        if (limitMaxHours) {\r\n            const maxTime = self.config.maxTime !== undefined\r\n                ? self.config.maxTime\r\n                : self.config.maxDate;\r\n            hours = Math.min(hours, maxTime.getHours());\r\n            if (hours === maxTime.getHours())\r\n                minutes = Math.min(minutes, maxTime.getMinutes());\r\n            if (minutes === maxTime.getMinutes())\r\n                seconds = Math.min(seconds, maxTime.getSeconds());\r\n        }\r\n        if (limitMinHours) {\r\n            const minTime = self.config.minTime !== undefined\r\n                ? self.config.minTime\r\n                : self.config.minDate;\r\n            hours = Math.max(hours, minTime.getHours());\r\n            if (hours === minTime.getHours() && minutes < minTime.getMinutes())\r\n                minutes = minTime.getMinutes();\r\n            if (minutes === minTime.getMinutes())\r\n                seconds = Math.max(seconds, minTime.getSeconds());\r\n        }\r\n        setHours(hours, minutes, seconds);\r\n    }\r\n    function setHoursFromDate(dateObj) {\r\n        const date = dateObj || self.latestSelectedDateObj;\r\n        if (date) {\r\n            setHours(date.getHours(), date.getMinutes(), date.getSeconds());\r\n        }\r\n    }\r\n    function setHours(hours, minutes, seconds) {\r\n        if (self.latestSelectedDateObj !== undefined) {\r\n            self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);\r\n        }\r\n        if (!self.hourElement || !self.minuteElement || self.isMobile)\r\n            return;\r\n        self.hourElement.value = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.pad)(!self.config.time_24hr\r\n            ? ((12 + hours) % 12) + 12 * (0,_utils__WEBPACK_IMPORTED_MODULE_2__.int)(hours % 12 === 0)\r\n            : hours);\r\n        self.minuteElement.value = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.pad)(minutes);\r\n        if (self.amPM !== undefined)\r\n            self.amPM.textContent = self.l10n.amPM[(0,_utils__WEBPACK_IMPORTED_MODULE_2__.int)(hours >= 12)];\r\n        if (self.secondElement !== undefined)\r\n            self.secondElement.value = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.pad)(seconds);\r\n    }\r\n    function onYearInput(event) {\r\n        const eventTarget = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.getEventTarget)(event);\r\n        const year = parseInt(eventTarget.value) + (event.delta || 0);\r\n        if (year / 1000 > 1 ||\r\n            (event.key === \"Enter\" && !/[^\\d]/.test(year.toString()))) {\r\n            changeYear(year);\r\n        }\r\n    }\r\n    function bind(element, event, handler, options) {\r\n        if (event instanceof Array)\r\n            return event.forEach((ev) => bind(element, ev, handler, options));\r\n        if (element instanceof Array)\r\n            return element.forEach((el) => bind(el, event, handler, options));\r\n        element.addEventListener(event, handler, options);\r\n        self._handlers.push({\r\n            remove: () => element.removeEventListener(event, handler),\r\n        });\r\n    }\r\n    function triggerChange() {\r\n        triggerEvent(\"onChange\");\r\n    }\r\n    function bindEvents() {\r\n        if (self.config.wrap) {\r\n            [\"open\", \"close\", \"toggle\", \"clear\"].forEach((evt) => {\r\n                Array.prototype.forEach.call(self.element.querySelectorAll(`[data-${evt}]`), (el) => bind(el, \"click\", self[evt]));\r\n            });\r\n        }\r\n        if (self.isMobile) {\r\n            setupMobile();\r\n            return;\r\n        }\r\n        const debouncedResize = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.debounce)(onResize, 50);\r\n        self._debouncedChange = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.debounce)(triggerChange, DEBOUNCED_CHANGE_MS);\r\n        if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent))\r\n            bind(self.daysContainer, \"mouseover\", (e) => {\r\n                if (self.config.mode === \"range\")\r\n                    onMouseOver((0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.getEventTarget)(e));\r\n            });\r\n        bind(window.document.body, \"keydown\", onKeyDown);\r\n        if (!self.config.inline && !self.config.static)\r\n            bind(window, \"resize\", debouncedResize);\r\n        if (window.ontouchstart !== undefined)\r\n            bind(window.document, \"touchstart\", documentClick);\r\n        else\r\n            bind(window.document, \"mousedown\", documentClick);\r\n        bind(window.document, \"focus\", documentClick, { capture: true });\r\n        if (self.config.clickOpens === true) {\r\n            bind(self._input, \"focus\", self.open);\r\n            bind(self._input, \"click\", self.open);\r\n        }\r\n        if (self.daysContainer !== undefined) {\r\n            bind(self.monthNav, \"click\", onMonthNavClick);\r\n            bind(self.monthNav, [\"keyup\", \"increment\"], onYearInput);\r\n            bind(self.daysContainer, \"click\", selectDate);\r\n        }\r\n        if (self.timeContainer !== undefined &&\r\n            self.minuteElement !== undefined &&\r\n            self.hourElement !== undefined) {\r\n            const selText = (e) => (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.getEventTarget)(e).select();\r\n            bind(self.timeContainer, [\"increment\"], updateTime);\r\n            bind(self.timeContainer, \"blur\", updateTime, { capture: true });\r\n            bind(self.timeContainer, \"click\", timeIncrement);\r\n            bind([self.hourElement, self.minuteElement], [\"focus\", \"click\"], selText);\r\n            if (self.secondElement !== undefined)\r\n                bind(self.secondElement, \"focus\", () => self.secondElement && self.secondElement.select());\r\n            if (self.amPM !== undefined) {\r\n                bind(self.amPM, \"click\", (e) => {\r\n                    updateTime(e);\r\n                    triggerChange();\r\n                });\r\n            }\r\n        }\r\n        if (self.config.allowInput) {\r\n            bind(self._input, \"blur\", onBlur);\r\n        }\r\n    }\r\n    function jumpToDate(jumpDate, triggerChange) {\r\n        const jumpTo = jumpDate !== undefined\r\n            ? self.parseDate(jumpDate)\r\n            : self.latestSelectedDateObj ||\r\n                (self.config.minDate && self.config.minDate > self.now\r\n                    ? self.config.minDate\r\n                    : self.config.maxDate && self.config.maxDate < self.now\r\n                        ? self.config.maxDate\r\n                        : self.now);\r\n        const oldYear = self.currentYear;\r\n        const oldMonth = self.currentMonth;\r\n        try {\r\n            if (jumpTo !== undefined) {\r\n                self.currentYear = jumpTo.getFullYear();\r\n                self.currentMonth = jumpTo.getMonth();\r\n            }\r\n        }\r\n        catch (e) {\r\n            e.message = \"Invalid date supplied: \" + jumpTo;\r\n            self.config.errorHandler(e);\r\n        }\r\n        if (triggerChange && self.currentYear !== oldYear) {\r\n            triggerEvent(\"onYearChange\");\r\n            buildMonthSwitch();\r\n        }\r\n        if (triggerChange &&\r\n            (self.currentYear !== oldYear || self.currentMonth !== oldMonth)) {\r\n            triggerEvent(\"onMonthChange\");\r\n        }\r\n        self.redraw();\r\n    }\r\n    function timeIncrement(e) {\r\n        const eventTarget = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.getEventTarget)(e);\r\n        if (~eventTarget.className.indexOf(\"arrow\"))\r\n            incrementNumInput(e, eventTarget.classList.contains(\"arrowUp\") ? 1 : -1);\r\n    }\r\n    function incrementNumInput(e, delta, inputElem) {\r\n        const target = e && (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.getEventTarget)(e);\r\n        const input = inputElem ||\r\n            (target && target.parentNode && target.parentNode.firstChild);\r\n        const event = createEvent(\"increment\");\r\n        event.delta = delta;\r\n        input && input.dispatchEvent(event);\r\n    }\r\n    function build() {\r\n        const fragment = window.document.createDocumentFragment();\r\n        self.calendarContainer = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"div\", \"flatpickr-calendar\");\r\n        self.calendarContainer.tabIndex = -1;\r\n        if (!self.config.noCalendar) {\r\n            fragment.appendChild(buildMonthNav());\r\n            self.innerContainer = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"div\", \"flatpickr-innerContainer\");\r\n            if (self.config.weekNumbers) {\r\n                const { weekWrapper, weekNumbers } = buildWeeks();\r\n                self.innerContainer.appendChild(weekWrapper);\r\n                self.weekNumbers = weekNumbers;\r\n                self.weekWrapper = weekWrapper;\r\n            }\r\n            self.rContainer = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"div\", \"flatpickr-rContainer\");\r\n            self.rContainer.appendChild(buildWeekdays());\r\n            if (!self.daysContainer) {\r\n                self.daysContainer = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"div\", \"flatpickr-days\");\r\n                self.daysContainer.tabIndex = -1;\r\n            }\r\n            buildDays();\r\n            self.rContainer.appendChild(self.daysContainer);\r\n            self.innerContainer.appendChild(self.rContainer);\r\n            fragment.appendChild(self.innerContainer);\r\n        }\r\n        if (self.config.enableTime) {\r\n            fragment.appendChild(buildTime());\r\n        }\r\n        (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(self.calendarContainer, \"rangeMode\", self.config.mode === \"range\");\r\n        (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(self.calendarContainer, \"animate\", self.config.animate === true);\r\n        (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(self.calendarContainer, \"multiMonth\", self.config.showMonths > 1);\r\n        self.calendarContainer.appendChild(fragment);\r\n        const customAppend = self.config.appendTo !== undefined &&\r\n            self.config.appendTo.nodeType !== undefined;\r\n        if (self.config.inline || self.config.static) {\r\n            self.calendarContainer.classList.add(self.config.inline ? \"inline\" : \"static\");\r\n            if (self.config.inline) {\r\n                if (!customAppend && self.element.parentNode)\r\n                    self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);\r\n                else if (self.config.appendTo !== undefined)\r\n                    self.config.appendTo.appendChild(self.calendarContainer);\r\n            }\r\n            if (self.config.static) {\r\n                const wrapper = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"div\", \"flatpickr-wrapper\");\r\n                if (self.element.parentNode)\r\n                    self.element.parentNode.insertBefore(wrapper, self.element);\r\n                wrapper.appendChild(self.element);\r\n                if (self.altInput)\r\n                    wrapper.appendChild(self.altInput);\r\n                wrapper.appendChild(self.calendarContainer);\r\n            }\r\n        }\r\n        if (!self.config.static && !self.config.inline)\r\n            (self.config.appendTo !== undefined\r\n                ? self.config.appendTo\r\n                : window.document.body).appendChild(self.calendarContainer);\r\n    }\r\n    function createDay(className, date, dayNumber, i) {\r\n        const dateIsEnabled = isEnabled(date, true), dayElement = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"span\", \"flatpickr-day \" + className, date.getDate().toString());\r\n        dayElement.dateObj = date;\r\n        dayElement.$i = i;\r\n        dayElement.setAttribute(\"aria-label\", self.formatDate(date, self.config.ariaDateFormat));\r\n        if (className.indexOf(\"hidden\") === -1 &&\r\n            (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.compareDates)(date, self.now) === 0) {\r\n            self.todayDateElem = dayElement;\r\n            dayElement.classList.add(\"today\");\r\n            dayElement.setAttribute(\"aria-current\", \"date\");\r\n        }\r\n        if (dateIsEnabled) {\r\n            dayElement.tabIndex = -1;\r\n            if (isDateSelected(date)) {\r\n                dayElement.classList.add(\"selected\");\r\n                self.selectedDateElem = dayElement;\r\n                if (self.config.mode === \"range\") {\r\n                    (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(dayElement, \"startRange\", self.selectedDates[0] &&\r\n                        (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.compareDates)(date, self.selectedDates[0], true) === 0);\r\n                    (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(dayElement, \"endRange\", self.selectedDates[1] &&\r\n                        (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.compareDates)(date, self.selectedDates[1], true) === 0);\r\n                    if (className === \"nextMonthDay\")\r\n                        dayElement.classList.add(\"inRange\");\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            dayElement.classList.add(\"flatpickr-disabled\");\r\n        }\r\n        if (self.config.mode === \"range\") {\r\n            if (isDateInRange(date) && !isDateSelected(date))\r\n                dayElement.classList.add(\"inRange\");\r\n        }\r\n        if (self.weekNumbers &&\r\n            self.config.showMonths === 1 &&\r\n            className !== \"prevMonthDay\" &&\r\n            dayNumber % 7 === 1) {\r\n            self.weekNumbers.insertAdjacentHTML(\"beforeend\", \"<span class='flatpickr-day'>\" + self.config.getWeek(date) + \"</span>\");\r\n        }\r\n        triggerEvent(\"onDayCreate\", dayElement);\r\n        return dayElement;\r\n    }\r\n    function focusOnDayElem(targetNode) {\r\n        targetNode.focus();\r\n        if (self.config.mode === \"range\")\r\n            onMouseOver(targetNode);\r\n    }\r\n    function getFirstAvailableDay(delta) {\r\n        const startMonth = delta > 0 ? 0 : self.config.showMonths - 1;\r\n        const endMonth = delta > 0 ? self.config.showMonths : -1;\r\n        for (let m = startMonth; m != endMonth; m += delta) {\r\n            const month = self.daysContainer.children[m];\r\n            const startIndex = delta > 0 ? 0 : month.children.length - 1;\r\n            const endIndex = delta > 0 ? month.children.length : -1;\r\n            for (let i = startIndex; i != endIndex; i += delta) {\r\n                const c = month.children[i];\r\n                if (c.className.indexOf(\"hidden\") === -1 && isEnabled(c.dateObj))\r\n                    return c;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    function getNextAvailableDay(current, delta) {\r\n        const givenMonth = current.className.indexOf(\"Month\") === -1\r\n            ? current.dateObj.getMonth()\r\n            : self.currentMonth;\r\n        const endMonth = delta > 0 ? self.config.showMonths : -1;\r\n        const loopDelta = delta > 0 ? 1 : -1;\r\n        for (let m = givenMonth - self.currentMonth; m != endMonth; m += loopDelta) {\r\n            const month = self.daysContainer.children[m];\r\n            const startIndex = givenMonth - self.currentMonth === m\r\n                ? current.$i + delta\r\n                : delta < 0\r\n                    ? month.children.length - 1\r\n                    : 0;\r\n            const numMonthDays = month.children.length;\r\n            for (let i = startIndex; i >= 0 && i < numMonthDays && i != (delta > 0 ? numMonthDays : -1); i += loopDelta) {\r\n                const c = month.children[i];\r\n                if (c.className.indexOf(\"hidden\") === -1 &&\r\n                    isEnabled(c.dateObj) &&\r\n                    Math.abs(current.$i - i) >= Math.abs(delta))\r\n                    return focusOnDayElem(c);\r\n            }\r\n        }\r\n        self.changeMonth(loopDelta);\r\n        focusOnDay(getFirstAvailableDay(loopDelta), 0);\r\n        return undefined;\r\n    }\r\n    function focusOnDay(current, offset) {\r\n        const dayFocused = isInView(document.activeElement || document.body);\r\n        const startElem = current !== undefined\r\n            ? current\r\n            : dayFocused\r\n                ? document.activeElement\r\n                : self.selectedDateElem !== undefined && isInView(self.selectedDateElem)\r\n                    ? self.selectedDateElem\r\n                    : self.todayDateElem !== undefined && isInView(self.todayDateElem)\r\n                        ? self.todayDateElem\r\n                        : getFirstAvailableDay(offset > 0 ? 1 : -1);\r\n        if (startElem === undefined) {\r\n            self._input.focus();\r\n        }\r\n        else if (!dayFocused) {\r\n            focusOnDayElem(startElem);\r\n        }\r\n        else {\r\n            getNextAvailableDay(startElem, offset);\r\n        }\r\n    }\r\n    function buildMonthDays(year, month) {\r\n        const firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;\r\n        const prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12, year);\r\n        const daysInMonth = self.utils.getDaysInMonth(month, year), days = window.document.createDocumentFragment(), isMultiMonth = self.config.showMonths > 1, prevMonthDayClass = isMultiMonth ? \"prevMonthDay hidden\" : \"prevMonthDay\", nextMonthDayClass = isMultiMonth ? \"nextMonthDay hidden\" : \"nextMonthDay\";\r\n        let dayNumber = prevMonthDays + 1 - firstOfMonth, dayIndex = 0;\r\n        for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {\r\n            days.appendChild(createDay(prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));\r\n        }\r\n        for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {\r\n            days.appendChild(createDay(\"\", new Date(year, month, dayNumber), dayNumber, dayIndex));\r\n        }\r\n        for (let dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth &&\r\n            (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {\r\n            days.appendChild(createDay(nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));\r\n        }\r\n        const dayContainer = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"div\", \"dayContainer\");\r\n        dayContainer.appendChild(days);\r\n        return dayContainer;\r\n    }\r\n    function buildDays() {\r\n        if (self.daysContainer === undefined) {\r\n            return;\r\n        }\r\n        (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.clearNode)(self.daysContainer);\r\n        if (self.weekNumbers)\r\n            (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.clearNode)(self.weekNumbers);\r\n        const frag = document.createDocumentFragment();\r\n        for (let i = 0; i < self.config.showMonths; i++) {\r\n            const d = new Date(self.currentYear, self.currentMonth, 1);\r\n            d.setMonth(self.currentMonth + i);\r\n            frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));\r\n        }\r\n        self.daysContainer.appendChild(frag);\r\n        self.days = self.daysContainer.firstChild;\r\n        if (self.config.mode === \"range\" && self.selectedDates.length === 1) {\r\n            onMouseOver();\r\n        }\r\n    }\r\n    function buildMonthSwitch() {\r\n        if (self.config.showMonths > 1 ||\r\n            self.config.monthSelectorType !== \"dropdown\")\r\n            return;\r\n        const shouldBuildMonth = function (month) {\r\n            if (self.config.minDate !== undefined &&\r\n                self.currentYear === self.config.minDate.getFullYear() &&\r\n                month < self.config.minDate.getMonth()) {\r\n                return false;\r\n            }\r\n            return !(self.config.maxDate !== undefined &&\r\n                self.currentYear === self.config.maxDate.getFullYear() &&\r\n                month > self.config.maxDate.getMonth());\r\n        };\r\n        self.monthsDropdownContainer.tabIndex = -1;\r\n        self.monthsDropdownContainer.innerHTML = \"\";\r\n        for (let i = 0; i < 12; i++) {\r\n            if (!shouldBuildMonth(i))\r\n                continue;\r\n            const month = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"option\", \"flatpickr-monthDropdown-month\");\r\n            month.value = new Date(self.currentYear, i).getMonth().toString();\r\n            month.textContent = (0,_utils_formatting__WEBPACK_IMPORTED_MODULE_5__.monthToStr)(i, self.config.shorthandCurrentMonth, self.l10n);\r\n            month.tabIndex = -1;\r\n            if (self.currentMonth === i) {\r\n                month.selected = true;\r\n            }\r\n            self.monthsDropdownContainer.appendChild(month);\r\n        }\r\n    }\r\n    function buildMonth() {\r\n        const container = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"div\", \"flatpickr-month\");\r\n        const monthNavFragment = window.document.createDocumentFragment();\r\n        let monthElement;\r\n        if (self.config.showMonths > 1 ||\r\n            self.config.monthSelectorType === \"static\") {\r\n            monthElement = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"span\", \"cur-month\");\r\n        }\r\n        else {\r\n            self.monthsDropdownContainer = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"select\", \"flatpickr-monthDropdown-months\");\r\n            self.monthsDropdownContainer.setAttribute(\"aria-label\", self.l10n.monthAriaLabel);\r\n            bind(self.monthsDropdownContainer, \"change\", (e) => {\r\n                const target = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.getEventTarget)(e);\r\n                const selectedMonth = parseInt(target.value, 10);\r\n                self.changeMonth(selectedMonth - self.currentMonth);\r\n                triggerEvent(\"onMonthChange\");\r\n            });\r\n            buildMonthSwitch();\r\n            monthElement = self.monthsDropdownContainer;\r\n        }\r\n        const yearInput = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createNumberInput)(\"cur-year\", { tabindex: \"-1\" });\r\n        const yearElement = yearInput.getElementsByTagName(\"input\")[0];\r\n        yearElement.setAttribute(\"aria-label\", self.l10n.yearAriaLabel);\r\n        if (self.config.minDate) {\r\n            yearElement.setAttribute(\"min\", self.config.minDate.getFullYear().toString());\r\n        }\r\n        if (self.config.maxDate) {\r\n            yearElement.setAttribute(\"max\", self.config.maxDate.getFullYear().toString());\r\n            yearElement.disabled =\r\n                !!self.config.minDate &&\r\n                    self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();\r\n        }\r\n        const currentMonth = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"div\", \"flatpickr-current-month\");\r\n        currentMonth.appendChild(monthElement);\r\n        currentMonth.appendChild(yearInput);\r\n        monthNavFragment.appendChild(currentMonth);\r\n        container.appendChild(monthNavFragment);\r\n        return {\r\n            container,\r\n            yearElement,\r\n            monthElement,\r\n        };\r\n    }\r\n    function buildMonths() {\r\n        (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.clearNode)(self.monthNav);\r\n        self.monthNav.appendChild(self.prevMonthNav);\r\n        if (self.config.showMonths) {\r\n            self.yearElements = [];\r\n            self.monthElements = [];\r\n        }\r\n        for (let m = self.config.showMonths; m--;) {\r\n            const month = buildMonth();\r\n            self.yearElements.push(month.yearElement);\r\n            self.monthElements.push(month.monthElement);\r\n            self.monthNav.appendChild(month.container);\r\n        }\r\n        self.monthNav.appendChild(self.nextMonthNav);\r\n    }\r\n    function buildMonthNav() {\r\n        self.monthNav = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"div\", \"flatpickr-months\");\r\n        self.yearElements = [];\r\n        self.monthElements = [];\r\n        self.prevMonthNav = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"span\", \"flatpickr-prev-month\");\r\n        self.prevMonthNav.innerHTML = self.config.prevArrow;\r\n        self.nextMonthNav = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"span\", \"flatpickr-next-month\");\r\n        self.nextMonthNav.innerHTML = self.config.nextArrow;\r\n        buildMonths();\r\n        Object.defineProperty(self, \"_hidePrevMonthArrow\", {\r\n            get: () => self.__hidePrevMonthArrow,\r\n            set(bool) {\r\n                if (self.__hidePrevMonthArrow !== bool) {\r\n                    (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(self.prevMonthNav, \"flatpickr-disabled\", bool);\r\n                    self.__hidePrevMonthArrow = bool;\r\n                }\r\n            },\r\n        });\r\n        Object.defineProperty(self, \"_hideNextMonthArrow\", {\r\n            get: () => self.__hideNextMonthArrow,\r\n            set(bool) {\r\n                if (self.__hideNextMonthArrow !== bool) {\r\n                    (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(self.nextMonthNav, \"flatpickr-disabled\", bool);\r\n                    self.__hideNextMonthArrow = bool;\r\n                }\r\n            },\r\n        });\r\n        self.currentYearElement = self.yearElements[0];\r\n        updateNavigationCurrentMonth();\r\n        return self.monthNav;\r\n    }\r\n    function buildTime() {\r\n        self.calendarContainer.classList.add(\"hasTime\");\r\n        if (self.config.noCalendar)\r\n            self.calendarContainer.classList.add(\"noCalendar\");\r\n        const defaults = (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.getDefaultHours)(self.config);\r\n        self.timeContainer = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"div\", \"flatpickr-time\");\r\n        self.timeContainer.tabIndex = -1;\r\n        const separator = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"span\", \"flatpickr-time-separator\", \":\");\r\n        const hourInput = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createNumberInput)(\"flatpickr-hour\", {\r\n            \"aria-label\": self.l10n.hourAriaLabel,\r\n        });\r\n        self.hourElement = hourInput.getElementsByTagName(\"input\")[0];\r\n        const minuteInput = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createNumberInput)(\"flatpickr-minute\", {\r\n            \"aria-label\": self.l10n.minuteAriaLabel,\r\n        });\r\n        self.minuteElement = minuteInput.getElementsByTagName(\"input\")[0];\r\n        self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;\r\n        self.hourElement.value = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.pad)(self.latestSelectedDateObj\r\n            ? self.latestSelectedDateObj.getHours()\r\n            : self.config.time_24hr\r\n                ? defaults.hours\r\n                : military2ampm(defaults.hours));\r\n        self.minuteElement.value = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.pad)(self.latestSelectedDateObj\r\n            ? self.latestSelectedDateObj.getMinutes()\r\n            : defaults.minutes);\r\n        self.hourElement.setAttribute(\"step\", self.config.hourIncrement.toString());\r\n        self.minuteElement.setAttribute(\"step\", self.config.minuteIncrement.toString());\r\n        self.hourElement.setAttribute(\"min\", self.config.time_24hr ? \"0\" : \"1\");\r\n        self.hourElement.setAttribute(\"max\", self.config.time_24hr ? \"23\" : \"12\");\r\n        self.hourElement.setAttribute(\"maxlength\", \"2\");\r\n        self.minuteElement.setAttribute(\"min\", \"0\");\r\n        self.minuteElement.setAttribute(\"max\", \"59\");\r\n        self.minuteElement.setAttribute(\"maxlength\", \"2\");\r\n        self.timeContainer.appendChild(hourInput);\r\n        self.timeContainer.appendChild(separator);\r\n        self.timeContainer.appendChild(minuteInput);\r\n        if (self.config.time_24hr)\r\n            self.timeContainer.classList.add(\"time24hr\");\r\n        if (self.config.enableSeconds) {\r\n            self.timeContainer.classList.add(\"hasSeconds\");\r\n            const secondInput = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createNumberInput)(\"flatpickr-second\");\r\n            self.secondElement = secondInput.getElementsByTagName(\"input\")[0];\r\n            self.secondElement.value = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.pad)(self.latestSelectedDateObj\r\n                ? self.latestSelectedDateObj.getSeconds()\r\n                : defaults.seconds);\r\n            self.secondElement.setAttribute(\"step\", self.minuteElement.getAttribute(\"step\"));\r\n            self.secondElement.setAttribute(\"min\", \"0\");\r\n            self.secondElement.setAttribute(\"max\", \"59\");\r\n            self.secondElement.setAttribute(\"maxlength\", \"2\");\r\n            self.timeContainer.appendChild((0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"span\", \"flatpickr-time-separator\", \":\"));\r\n            self.timeContainer.appendChild(secondInput);\r\n        }\r\n        if (!self.config.time_24hr) {\r\n            self.amPM = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"span\", \"flatpickr-am-pm\", self.l10n.amPM[(0,_utils__WEBPACK_IMPORTED_MODULE_2__.int)((self.latestSelectedDateObj\r\n                ? self.hourElement.value\r\n                : self.config.defaultHour) > 11)]);\r\n            self.amPM.title = self.l10n.toggleTitle;\r\n            self.amPM.tabIndex = -1;\r\n            self.timeContainer.appendChild(self.amPM);\r\n        }\r\n        return self.timeContainer;\r\n    }\r\n    function buildWeekdays() {\r\n        if (!self.weekdayContainer)\r\n            self.weekdayContainer = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"div\", \"flatpickr-weekdays\");\r\n        else\r\n            (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.clearNode)(self.weekdayContainer);\r\n        for (let i = self.config.showMonths; i--;) {\r\n            const container = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"div\", \"flatpickr-weekdaycontainer\");\r\n            self.weekdayContainer.appendChild(container);\r\n        }\r\n        updateWeekdays();\r\n        return self.weekdayContainer;\r\n    }\r\n    function updateWeekdays() {\r\n        if (!self.weekdayContainer) {\r\n            return;\r\n        }\r\n        const firstDayOfWeek = self.l10n.firstDayOfWeek;\r\n        let weekdays = [...self.l10n.weekdays.shorthand];\r\n        if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {\r\n            weekdays = [\r\n                ...weekdays.splice(firstDayOfWeek, weekdays.length),\r\n                ...weekdays.splice(0, firstDayOfWeek),\r\n            ];\r\n        }\r\n        for (let i = self.config.showMonths; i--;) {\r\n            self.weekdayContainer.children[i].innerHTML = `\r\n      <span class='flatpickr-weekday'>\r\n        ${weekdays.join(\"</span><span class='flatpickr-weekday'>\")}\r\n      </span>\r\n      `;\r\n        }\r\n    }\r\n    function buildWeeks() {\r\n        self.calendarContainer.classList.add(\"hasWeeks\");\r\n        const weekWrapper = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"div\", \"flatpickr-weekwrapper\");\r\n        weekWrapper.appendChild((0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"span\", \"flatpickr-weekday\", self.l10n.weekAbbreviation));\r\n        const weekNumbers = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"div\", \"flatpickr-weeks\");\r\n        weekWrapper.appendChild(weekNumbers);\r\n        return {\r\n            weekWrapper,\r\n            weekNumbers,\r\n        };\r\n    }\r\n    function changeMonth(value, isOffset = true) {\r\n        const delta = isOffset ? value : value - self.currentMonth;\r\n        if ((delta < 0 && self._hidePrevMonthArrow === true) ||\r\n            (delta > 0 && self._hideNextMonthArrow === true))\r\n            return;\r\n        self.currentMonth += delta;\r\n        if (self.currentMonth < 0 || self.currentMonth > 11) {\r\n            self.currentYear += self.currentMonth > 11 ? 1 : -1;\r\n            self.currentMonth = (self.currentMonth + 12) % 12;\r\n            triggerEvent(\"onYearChange\");\r\n            buildMonthSwitch();\r\n        }\r\n        buildDays();\r\n        triggerEvent(\"onMonthChange\");\r\n        updateNavigationCurrentMonth();\r\n    }\r\n    function clear(triggerChangeEvent = true, toInitial = true) {\r\n        self.input.value = \"\";\r\n        if (self.altInput !== undefined)\r\n            self.altInput.value = \"\";\r\n        if (self.mobileInput !== undefined)\r\n            self.mobileInput.value = \"\";\r\n        self.selectedDates = [];\r\n        self.latestSelectedDateObj = undefined;\r\n        if (toInitial === true) {\r\n            self.currentYear = self._initialDate.getFullYear();\r\n            self.currentMonth = self._initialDate.getMonth();\r\n        }\r\n        if (self.config.enableTime === true) {\r\n            const { hours, minutes, seconds } = (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.getDefaultHours)(self.config);\r\n            setHours(hours, minutes, seconds);\r\n        }\r\n        self.redraw();\r\n        if (triggerChangeEvent)\r\n            triggerEvent(\"onChange\");\r\n    }\r\n    function close() {\r\n        self.isOpen = false;\r\n        if (!self.isMobile) {\r\n            if (self.calendarContainer !== undefined) {\r\n                self.calendarContainer.classList.remove(\"open\");\r\n            }\r\n            if (self._input !== undefined) {\r\n                self._input.classList.remove(\"active\");\r\n            }\r\n        }\r\n        triggerEvent(\"onClose\");\r\n    }\r\n    function destroy() {\r\n        if (self.config !== undefined)\r\n            triggerEvent(\"onDestroy\");\r\n        for (let i = self._handlers.length; i--;) {\r\n            self._handlers[i].remove();\r\n        }\r\n        self._handlers = [];\r\n        if (self.mobileInput) {\r\n            if (self.mobileInput.parentNode)\r\n                self.mobileInput.parentNode.removeChild(self.mobileInput);\r\n            self.mobileInput = undefined;\r\n        }\r\n        else if (self.calendarContainer && self.calendarContainer.parentNode) {\r\n            if (self.config.static && self.calendarContainer.parentNode) {\r\n                const wrapper = self.calendarContainer.parentNode;\r\n                wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);\r\n                if (wrapper.parentNode) {\r\n                    while (wrapper.firstChild)\r\n                        wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);\r\n                    wrapper.parentNode.removeChild(wrapper);\r\n                }\r\n            }\r\n            else\r\n                self.calendarContainer.parentNode.removeChild(self.calendarContainer);\r\n        }\r\n        if (self.altInput) {\r\n            self.input.type = \"text\";\r\n            if (self.altInput.parentNode)\r\n                self.altInput.parentNode.removeChild(self.altInput);\r\n            delete self.altInput;\r\n        }\r\n        if (self.input) {\r\n            self.input.type = self.input._type;\r\n            self.input.classList.remove(\"flatpickr-input\");\r\n            self.input.removeAttribute(\"readonly\");\r\n        }\r\n        [\r\n            \"_showTimeInput\",\r\n            \"latestSelectedDateObj\",\r\n            \"_hideNextMonthArrow\",\r\n            \"_hidePrevMonthArrow\",\r\n            \"__hideNextMonthArrow\",\r\n            \"__hidePrevMonthArrow\",\r\n            \"isMobile\",\r\n            \"isOpen\",\r\n            \"selectedDateElem\",\r\n            \"minDateHasTime\",\r\n            \"maxDateHasTime\",\r\n            \"days\",\r\n            \"daysContainer\",\r\n            \"_input\",\r\n            \"_positionElement\",\r\n            \"innerContainer\",\r\n            \"rContainer\",\r\n            \"monthNav\",\r\n            \"todayDateElem\",\r\n            \"calendarContainer\",\r\n            \"weekdayContainer\",\r\n            \"prevMonthNav\",\r\n            \"nextMonthNav\",\r\n            \"monthsDropdownContainer\",\r\n            \"currentMonthElement\",\r\n            \"currentYearElement\",\r\n            \"navigationCurrentMonth\",\r\n            \"selectedDateElem\",\r\n            \"config\",\r\n        ].forEach((k) => {\r\n            try {\r\n                delete self[k];\r\n            }\r\n            catch (_) { }\r\n        });\r\n    }\r\n    function isCalendarElem(elem) {\r\n        if (self.config.appendTo && self.config.appendTo.contains(elem))\r\n            return true;\r\n        return self.calendarContainer.contains(elem);\r\n    }\r\n    function documentClick(e) {\r\n        if (self.isOpen && !self.config.inline) {\r\n            const eventTarget = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.getEventTarget)(e);\r\n            const isCalendarElement = isCalendarElem(eventTarget);\r\n            const isInput = eventTarget === self.input ||\r\n                eventTarget === self.altInput ||\r\n                self.element.contains(eventTarget) ||\r\n                (e.path &&\r\n                    e.path.indexOf &&\r\n                    (~e.path.indexOf(self.input) ||\r\n                        ~e.path.indexOf(self.altInput)));\r\n            const lostFocus = e.type === \"blur\"\r\n                ? isInput &&\r\n                    e.relatedTarget &&\r\n                    !isCalendarElem(e.relatedTarget)\r\n                : !isInput &&\r\n                    !isCalendarElement &&\r\n                    !isCalendarElem(e.relatedTarget);\r\n            const isIgnored = !self.config.ignoredFocusElements.some((elem) => elem.contains(eventTarget));\r\n            if (lostFocus && isIgnored) {\r\n                if (self.timeContainer !== undefined &&\r\n                    self.minuteElement !== undefined &&\r\n                    self.hourElement !== undefined &&\r\n                    self.input.value !== \"\" &&\r\n                    self.input.value !== undefined) {\r\n                    updateTime();\r\n                }\r\n                self.close();\r\n                if (self.config &&\r\n                    self.config.mode === \"range\" &&\r\n                    self.selectedDates.length === 1) {\r\n                    self.clear(false);\r\n                    self.redraw();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function changeYear(newYear) {\r\n        if (!newYear ||\r\n            (self.config.minDate && newYear < self.config.minDate.getFullYear()) ||\r\n            (self.config.maxDate && newYear > self.config.maxDate.getFullYear()))\r\n            return;\r\n        const newYearNum = newYear, isNewYear = self.currentYear !== newYearNum;\r\n        self.currentYear = newYearNum || self.currentYear;\r\n        if (self.config.maxDate &&\r\n            self.currentYear === self.config.maxDate.getFullYear()) {\r\n            self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);\r\n        }\r\n        else if (self.config.minDate &&\r\n            self.currentYear === self.config.minDate.getFullYear()) {\r\n            self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);\r\n        }\r\n        if (isNewYear) {\r\n            self.redraw();\r\n            triggerEvent(\"onYearChange\");\r\n            buildMonthSwitch();\r\n        }\r\n    }\r\n    function isEnabled(date, timeless = true) {\r\n        var _a;\r\n        const dateToCheck = self.parseDate(date, undefined, timeless);\r\n        if ((self.config.minDate &&\r\n            dateToCheck &&\r\n            (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.compareDates)(dateToCheck, self.config.minDate, timeless !== undefined ? timeless : !self.minDateHasTime) < 0) ||\r\n            (self.config.maxDate &&\r\n                dateToCheck &&\r\n                (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.compareDates)(dateToCheck, self.config.maxDate, timeless !== undefined ? timeless : !self.maxDateHasTime) > 0))\r\n            return false;\r\n        if (!self.config.enable && self.config.disable.length === 0)\r\n            return true;\r\n        if (dateToCheck === undefined)\r\n            return false;\r\n        const bool = !!self.config.enable, array = (_a = self.config.enable) !== null && _a !== void 0 ? _a : self.config.disable;\r\n        for (let i = 0, d; i < array.length; i++) {\r\n            d = array[i];\r\n            if (typeof d === \"function\" &&\r\n                d(dateToCheck))\r\n                return bool;\r\n            else if (d instanceof Date &&\r\n                dateToCheck !== undefined &&\r\n                d.getTime() === dateToCheck.getTime())\r\n                return bool;\r\n            else if (typeof d === \"string\") {\r\n                const parsed = self.parseDate(d, undefined, true);\r\n                return parsed && parsed.getTime() === dateToCheck.getTime()\r\n                    ? bool\r\n                    : !bool;\r\n            }\r\n            else if (typeof d === \"object\" &&\r\n                dateToCheck !== undefined &&\r\n                d.from &&\r\n                d.to &&\r\n                dateToCheck.getTime() >= d.from.getTime() &&\r\n                dateToCheck.getTime() <= d.to.getTime())\r\n                return bool;\r\n        }\r\n        return !bool;\r\n    }\r\n    function isInView(elem) {\r\n        if (self.daysContainer !== undefined)\r\n            return (elem.className.indexOf(\"hidden\") === -1 &&\r\n                elem.className.indexOf(\"flatpickr-disabled\") === -1 &&\r\n                self.daysContainer.contains(elem));\r\n        return false;\r\n    }\r\n    function onBlur(e) {\r\n        const isInput = e.target === self._input;\r\n        if (isInput &&\r\n            (self.selectedDates.length > 0 || self._input.value.length > 0) &&\r\n            !(e.relatedTarget && isCalendarElem(e.relatedTarget))) {\r\n            self.setDate(self._input.value, true, e.target === self.altInput\r\n                ? self.config.altFormat\r\n                : self.config.dateFormat);\r\n        }\r\n    }\r\n    function onKeyDown(e) {\r\n        const eventTarget = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.getEventTarget)(e);\r\n        const isInput = self.config.wrap\r\n            ? element.contains(eventTarget)\r\n            : eventTarget === self._input;\r\n        const allowInput = self.config.allowInput;\r\n        const allowKeydown = self.isOpen && (!allowInput || !isInput);\r\n        const allowInlineKeydown = self.config.inline && isInput && !allowInput;\r\n        if (e.keyCode === 13 && isInput) {\r\n            if (allowInput) {\r\n                self.setDate(self._input.value, true, eventTarget === self.altInput\r\n                    ? self.config.altFormat\r\n                    : self.config.dateFormat);\r\n                return eventTarget.blur();\r\n            }\r\n            else {\r\n                self.open();\r\n            }\r\n        }\r\n        else if (isCalendarElem(eventTarget) ||\r\n            allowKeydown ||\r\n            allowInlineKeydown) {\r\n            const isTimeObj = !!self.timeContainer &&\r\n                self.timeContainer.contains(eventTarget);\r\n            switch (e.keyCode) {\r\n                case 13:\r\n                    if (isTimeObj) {\r\n                        e.preventDefault();\r\n                        updateTime();\r\n                        focusAndClose();\r\n                    }\r\n                    else\r\n                        selectDate(e);\r\n                    break;\r\n                case 27:\r\n                    e.preventDefault();\r\n                    focusAndClose();\r\n                    break;\r\n                case 8:\r\n                case 46:\r\n                    if (isInput && !self.config.allowInput) {\r\n                        e.preventDefault();\r\n                        self.clear();\r\n                    }\r\n                    break;\r\n                case 37:\r\n                case 39:\r\n                    if (!isTimeObj && !isInput) {\r\n                        e.preventDefault();\r\n                        if (self.daysContainer !== undefined &&\r\n                            (allowInput === false ||\r\n                                (document.activeElement && isInView(document.activeElement)))) {\r\n                            const delta = e.keyCode === 39 ? 1 : -1;\r\n                            if (!e.ctrlKey)\r\n                                focusOnDay(undefined, delta);\r\n                            else {\r\n                                e.stopPropagation();\r\n                                changeMonth(delta);\r\n                                focusOnDay(getFirstAvailableDay(1), 0);\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (self.hourElement)\r\n                        self.hourElement.focus();\r\n                    break;\r\n                case 38:\r\n                case 40:\r\n                    e.preventDefault();\r\n                    const delta = e.keyCode === 40 ? 1 : -1;\r\n                    if ((self.daysContainer &&\r\n                        eventTarget.$i !== undefined) ||\r\n                        eventTarget === self.input ||\r\n                        eventTarget === self.altInput) {\r\n                        if (e.ctrlKey) {\r\n                            e.stopPropagation();\r\n                            changeYear(self.currentYear - delta);\r\n                            focusOnDay(getFirstAvailableDay(1), 0);\r\n                        }\r\n                        else if (!isTimeObj)\r\n                            focusOnDay(undefined, delta * 7);\r\n                    }\r\n                    else if (eventTarget === self.currentYearElement) {\r\n                        changeYear(self.currentYear - delta);\r\n                    }\r\n                    else if (self.config.enableTime) {\r\n                        if (!isTimeObj && self.hourElement)\r\n                            self.hourElement.focus();\r\n                        updateTime(e);\r\n                        self._debouncedChange();\r\n                    }\r\n                    break;\r\n                case 9:\r\n                    if (isTimeObj) {\r\n                        const elems = [\r\n                            self.hourElement,\r\n                            self.minuteElement,\r\n                            self.secondElement,\r\n                            self.amPM,\r\n                        ]\r\n                            .concat(self.pluginElements)\r\n                            .filter((x) => x);\r\n                        const i = elems.indexOf(eventTarget);\r\n                        if (i !== -1) {\r\n                            const target = elems[i + (e.shiftKey ? -1 : 1)];\r\n                            e.preventDefault();\r\n                            (target || self._input).focus();\r\n                        }\r\n                    }\r\n                    else if (!self.config.noCalendar &&\r\n                        self.daysContainer &&\r\n                        self.daysContainer.contains(eventTarget) &&\r\n                        e.shiftKey) {\r\n                        e.preventDefault();\r\n                        self._input.focus();\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        if (self.amPM !== undefined && eventTarget === self.amPM) {\r\n            switch (e.key) {\r\n                case self.l10n.amPM[0].charAt(0):\r\n                case self.l10n.amPM[0].charAt(0).toLowerCase():\r\n                    self.amPM.textContent = self.l10n.amPM[0];\r\n                    setHoursFromInputs();\r\n                    updateValue();\r\n                    break;\r\n                case self.l10n.amPM[1].charAt(0):\r\n                case self.l10n.amPM[1].charAt(0).toLowerCase():\r\n                    self.amPM.textContent = self.l10n.amPM[1];\r\n                    setHoursFromInputs();\r\n                    updateValue();\r\n                    break;\r\n            }\r\n        }\r\n        if (isInput || isCalendarElem(eventTarget)) {\r\n            triggerEvent(\"onKeyDown\", e);\r\n        }\r\n    }\r\n    function onMouseOver(elem) {\r\n        if (self.selectedDates.length !== 1 ||\r\n            (elem &&\r\n                (!elem.classList.contains(\"flatpickr-day\") ||\r\n                    elem.classList.contains(\"flatpickr-disabled\"))))\r\n            return;\r\n        const hoverDate = elem\r\n            ? elem.dateObj.getTime()\r\n            : self.days.firstElementChild.dateObj.getTime(), initialDate = self.parseDate(self.selectedDates[0], undefined, true).getTime(), rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()), rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());\r\n        let containsDisabled = false;\r\n        let minRange = 0, maxRange = 0;\r\n        for (let t = rangeStartDate; t < rangeEndDate; t += _utils_dates__WEBPACK_IMPORTED_MODULE_4__.duration.DAY) {\r\n            if (!isEnabled(new Date(t), true)) {\r\n                containsDisabled =\r\n                    containsDisabled || (t > rangeStartDate && t < rangeEndDate);\r\n                if (t < initialDate && (!minRange || t > minRange))\r\n                    minRange = t;\r\n                else if (t > initialDate && (!maxRange || t < maxRange))\r\n                    maxRange = t;\r\n            }\r\n        }\r\n        for (let m = 0; m < self.config.showMonths; m++) {\r\n            const month = self.daysContainer.children[m];\r\n            for (let i = 0, l = month.children.length; i < l; i++) {\r\n                const dayElem = month.children[i], date = dayElem.dateObj;\r\n                const timestamp = date.getTime();\r\n                const outOfRange = (minRange > 0 && timestamp < minRange) ||\r\n                    (maxRange > 0 && timestamp > maxRange);\r\n                if (outOfRange) {\r\n                    dayElem.classList.add(\"notAllowed\");\r\n                    [\"inRange\", \"startRange\", \"endRange\"].forEach((c) => {\r\n                        dayElem.classList.remove(c);\r\n                    });\r\n                    continue;\r\n                }\r\n                else if (containsDisabled && !outOfRange)\r\n                    continue;\r\n                [\"startRange\", \"inRange\", \"endRange\", \"notAllowed\"].forEach((c) => {\r\n                    dayElem.classList.remove(c);\r\n                });\r\n                if (elem !== undefined) {\r\n                    elem.classList.add(hoverDate <= self.selectedDates[0].getTime()\r\n                        ? \"startRange\"\r\n                        : \"endRange\");\r\n                    if (initialDate < hoverDate && timestamp === initialDate)\r\n                        dayElem.classList.add(\"startRange\");\r\n                    else if (initialDate > hoverDate && timestamp === initialDate)\r\n                        dayElem.classList.add(\"endRange\");\r\n                    if (timestamp >= minRange &&\r\n                        (maxRange === 0 || timestamp <= maxRange) &&\r\n                        (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.isBetween)(timestamp, initialDate, hoverDate))\r\n                        dayElem.classList.add(\"inRange\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function onResize() {\r\n        if (self.isOpen && !self.config.static && !self.config.inline)\r\n            positionCalendar();\r\n    }\r\n    function open(e, positionElement = self._positionElement) {\r\n        if (self.isMobile === true) {\r\n            if (e) {\r\n                e.preventDefault();\r\n                const eventTarget = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.getEventTarget)(e);\r\n                if (eventTarget) {\r\n                    eventTarget.blur();\r\n                }\r\n            }\r\n            if (self.mobileInput !== undefined) {\r\n                self.mobileInput.focus();\r\n                self.mobileInput.click();\r\n            }\r\n            triggerEvent(\"onOpen\");\r\n            return;\r\n        }\r\n        else if (self._input.disabled || self.config.inline) {\r\n            return;\r\n        }\r\n        const wasOpen = self.isOpen;\r\n        self.isOpen = true;\r\n        if (!wasOpen) {\r\n            self.calendarContainer.classList.add(\"open\");\r\n            self._input.classList.add(\"active\");\r\n            triggerEvent(\"onOpen\");\r\n            positionCalendar(positionElement);\r\n        }\r\n        if (self.config.enableTime === true && self.config.noCalendar === true) {\r\n            if (self.config.allowInput === false &&\r\n                (e === undefined ||\r\n                    !self.timeContainer.contains(e.relatedTarget))) {\r\n                setTimeout(() => self.hourElement.select(), 50);\r\n            }\r\n        }\r\n    }\r\n    function minMaxDateSetter(type) {\r\n        return (date) => {\r\n            const dateObj = (self.config[`_${type}Date`] = self.parseDate(date, self.config.dateFormat));\r\n            const inverseDateObj = self.config[`_${type === \"min\" ? \"max\" : \"min\"}Date`];\r\n            if (dateObj !== undefined) {\r\n                self[type === \"min\" ? \"minDateHasTime\" : \"maxDateHasTime\"] =\r\n                    dateObj.getHours() > 0 ||\r\n                        dateObj.getMinutes() > 0 ||\r\n                        dateObj.getSeconds() > 0;\r\n            }\r\n            if (self.selectedDates) {\r\n                self.selectedDates = self.selectedDates.filter((d) => isEnabled(d));\r\n                if (!self.selectedDates.length && type === \"min\")\r\n                    setHoursFromDate(dateObj);\r\n                updateValue();\r\n            }\r\n            if (self.daysContainer) {\r\n                redraw();\r\n                if (dateObj !== undefined)\r\n                    self.currentYearElement[type] = dateObj.getFullYear().toString();\r\n                else\r\n                    self.currentYearElement.removeAttribute(type);\r\n                self.currentYearElement.disabled =\r\n                    !!inverseDateObj &&\r\n                        dateObj !== undefined &&\r\n                        inverseDateObj.getFullYear() === dateObj.getFullYear();\r\n            }\r\n        };\r\n    }\r\n    function parseConfig() {\r\n        const boolOpts = [\r\n            \"wrap\",\r\n            \"weekNumbers\",\r\n            \"allowInput\",\r\n            \"allowInvalidPreload\",\r\n            \"clickOpens\",\r\n            \"time_24hr\",\r\n            \"enableTime\",\r\n            \"noCalendar\",\r\n            \"altInput\",\r\n            \"shorthandCurrentMonth\",\r\n            \"inline\",\r\n            \"static\",\r\n            \"enableSeconds\",\r\n            \"disableMobile\",\r\n        ];\r\n        const userConfig = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(element.dataset || {}))), instanceConfig);\r\n        const formats = {};\r\n        self.config.parseDate = userConfig.parseDate;\r\n        self.config.formatDate = userConfig.formatDate;\r\n        Object.defineProperty(self.config, \"enable\", {\r\n            get: () => self.config._enable,\r\n            set: (dates) => {\r\n                self.config._enable = parseDateRules(dates);\r\n            },\r\n        });\r\n        Object.defineProperty(self.config, \"disable\", {\r\n            get: () => self.config._disable,\r\n            set: (dates) => {\r\n                self.config._disable = parseDateRules(dates);\r\n            },\r\n        });\r\n        const timeMode = userConfig.mode === \"time\";\r\n        if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {\r\n            const defaultDateFormat = flatpickr.defaultConfig.dateFormat || _types_options__WEBPACK_IMPORTED_MODULE_0__.defaults.dateFormat;\r\n            formats.dateFormat =\r\n                userConfig.noCalendar || timeMode\r\n                    ? \"H:i\" + (userConfig.enableSeconds ? \":S\" : \"\")\r\n                    : defaultDateFormat + \" H:i\" + (userConfig.enableSeconds ? \":S\" : \"\");\r\n        }\r\n        if (userConfig.altInput &&\r\n            (userConfig.enableTime || timeMode) &&\r\n            !userConfig.altFormat) {\r\n            const defaultAltFormat = flatpickr.defaultConfig.altFormat || _types_options__WEBPACK_IMPORTED_MODULE_0__.defaults.altFormat;\r\n            formats.altFormat =\r\n                userConfig.noCalendar || timeMode\r\n                    ? \"h:i\" + (userConfig.enableSeconds ? \":S K\" : \" K\")\r\n                    : defaultAltFormat + ` h:i${userConfig.enableSeconds ? \":S\" : \"\"} K`;\r\n        }\r\n        Object.defineProperty(self.config, \"minDate\", {\r\n            get: () => self.config._minDate,\r\n            set: minMaxDateSetter(\"min\"),\r\n        });\r\n        Object.defineProperty(self.config, \"maxDate\", {\r\n            get: () => self.config._maxDate,\r\n            set: minMaxDateSetter(\"max\"),\r\n        });\r\n        const minMaxTimeSetter = (type) => (val) => {\r\n            self.config[type === \"min\" ? \"_minTime\" : \"_maxTime\"] = self.parseDate(val, \"H:i:S\");\r\n        };\r\n        Object.defineProperty(self.config, \"minTime\", {\r\n            get: () => self.config._minTime,\r\n            set: minMaxTimeSetter(\"min\"),\r\n        });\r\n        Object.defineProperty(self.config, \"maxTime\", {\r\n            get: () => self.config._maxTime,\r\n            set: minMaxTimeSetter(\"max\"),\r\n        });\r\n        if (userConfig.mode === \"time\") {\r\n            self.config.noCalendar = true;\r\n            self.config.enableTime = true;\r\n        }\r\n        Object.assign(self.config, formats, userConfig);\r\n        for (let i = 0; i < boolOpts.length; i++)\r\n            self.config[boolOpts[i]] =\r\n                self.config[boolOpts[i]] === true ||\r\n                    self.config[boolOpts[i]] === \"true\";\r\n        _types_options__WEBPACK_IMPORTED_MODULE_0__.HOOKS.filter((hook) => self.config[hook] !== undefined).forEach((hook) => {\r\n            self.config[hook] = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.arrayify)(self.config[hook] || []).map(bindToInstance);\r\n        });\r\n        self.isMobile =\r\n            !self.config.disableMobile &&\r\n                !self.config.inline &&\r\n                self.config.mode === \"single\" &&\r\n                !self.config.disable.length &&\r\n                !self.config.enable &&\r\n                !self.config.weekNumbers &&\r\n                /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n        for (let i = 0; i < self.config.plugins.length; i++) {\r\n            const pluginConf = self.config.plugins[i](self) || {};\r\n            for (const key in pluginConf) {\r\n                if (_types_options__WEBPACK_IMPORTED_MODULE_0__.HOOKS.indexOf(key) > -1) {\r\n                    self.config[key] = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.arrayify)(pluginConf[key])\r\n                        .map(bindToInstance)\r\n                        .concat(self.config[key]);\r\n                }\r\n                else if (typeof userConfig[key] === \"undefined\")\r\n                    self.config[key] = pluginConf[key];\r\n            }\r\n        }\r\n        if (!userConfig.altInputClass) {\r\n            self.config.altInputClass =\r\n                getInputElem().className + \" \" + self.config.altInputClass;\r\n        }\r\n        triggerEvent(\"onParseConfig\");\r\n    }\r\n    function getInputElem() {\r\n        return self.config.wrap\r\n            ? element.querySelector(\"[data-input]\")\r\n            : element;\r\n    }\r\n    function setupLocale() {\r\n        if (typeof self.config.locale !== \"object\" &&\r\n            typeof flatpickr.l10ns[self.config.locale] === \"undefined\")\r\n            self.config.errorHandler(new Error(`flatpickr: invalid locale ${self.config.locale}`));\r\n        self.l10n = Object.assign(Object.assign({}, flatpickr.l10ns.default), (typeof self.config.locale === \"object\"\r\n            ? self.config.locale\r\n            : self.config.locale !== \"default\"\r\n                ? flatpickr.l10ns[self.config.locale]\r\n                : undefined));\r\n        _utils_formatting__WEBPACK_IMPORTED_MODULE_5__.tokenRegex.K = `(${self.l10n.amPM[0]}|${self.l10n.amPM[1]}|${self.l10n.amPM[0].toLowerCase()}|${self.l10n.amPM[1].toLowerCase()})`;\r\n        const userConfig = Object.assign(Object.assign({}, instanceConfig), JSON.parse(JSON.stringify(element.dataset || {})));\r\n        if (userConfig.time_24hr === undefined &&\r\n            flatpickr.defaultConfig.time_24hr === undefined) {\r\n            self.config.time_24hr = self.l10n.time_24hr;\r\n        }\r\n        self.formatDate = (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.createDateFormatter)(self);\r\n        self.parseDate = (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.createDateParser)({ config: self.config, l10n: self.l10n });\r\n    }\r\n    function positionCalendar(customPositionElement) {\r\n        if (typeof self.config.position === \"function\") {\r\n            return void self.config.position(self, customPositionElement);\r\n        }\r\n        if (self.calendarContainer === undefined)\r\n            return;\r\n        triggerEvent(\"onPreCalendarPosition\");\r\n        const positionElement = customPositionElement || self._positionElement;\r\n        const calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, ((acc, child) => acc + child.offsetHeight), 0), calendarWidth = self.calendarContainer.offsetWidth, configPos = self.config.position.split(\" \"), configPosVertical = configPos[0], configPosHorizontal = configPos.length > 1 ? configPos[1] : null, inputBounds = positionElement.getBoundingClientRect(), distanceFromBottom = window.innerHeight - inputBounds.bottom, showOnTop = configPosVertical === \"above\" ||\r\n            (configPosVertical !== \"below\" &&\r\n                distanceFromBottom < calendarHeight &&\r\n                inputBounds.top > calendarHeight);\r\n        const top = window.pageYOffset +\r\n            inputBounds.top +\r\n            (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);\r\n        (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(self.calendarContainer, \"arrowTop\", !showOnTop);\r\n        (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(self.calendarContainer, \"arrowBottom\", showOnTop);\r\n        if (self.config.inline)\r\n            return;\r\n        let left = window.pageXOffset + inputBounds.left;\r\n        let isCenter = false;\r\n        let isRight = false;\r\n        if (configPosHorizontal === \"center\") {\r\n            left -= (calendarWidth - inputBounds.width) / 2;\r\n            isCenter = true;\r\n        }\r\n        else if (configPosHorizontal === \"right\") {\r\n            left -= calendarWidth - inputBounds.width;\r\n            isRight = true;\r\n        }\r\n        (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(self.calendarContainer, \"arrowLeft\", !isCenter && !isRight);\r\n        (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(self.calendarContainer, \"arrowCenter\", isCenter);\r\n        (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(self.calendarContainer, \"arrowRight\", isRight);\r\n        const right = window.document.body.offsetWidth -\r\n            (window.pageXOffset + inputBounds.right);\r\n        const rightMost = left + calendarWidth > window.document.body.offsetWidth;\r\n        const centerMost = right + calendarWidth > window.document.body.offsetWidth;\r\n        (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(self.calendarContainer, \"rightMost\", rightMost);\r\n        if (self.config.static)\r\n            return;\r\n        self.calendarContainer.style.top = `${top}px`;\r\n        if (!rightMost) {\r\n            self.calendarContainer.style.left = `${left}px`;\r\n            self.calendarContainer.style.right = \"auto\";\r\n        }\r\n        else if (!centerMost) {\r\n            self.calendarContainer.style.left = \"auto\";\r\n            self.calendarContainer.style.right = `${right}px`;\r\n        }\r\n        else {\r\n            const doc = getDocumentStyleSheet();\r\n            if (doc === undefined)\r\n                return;\r\n            const bodyWidth = window.document.body.offsetWidth;\r\n            const centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);\r\n            const centerBefore = \".flatpickr-calendar.centerMost:before\";\r\n            const centerAfter = \".flatpickr-calendar.centerMost:after\";\r\n            const centerIndex = doc.cssRules.length;\r\n            const centerStyle = `{left:${inputBounds.left}px;right:auto;}`;\r\n            (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(self.calendarContainer, \"rightMost\", false);\r\n            (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.toggleClass)(self.calendarContainer, \"centerMost\", true);\r\n            doc.insertRule(`${centerBefore},${centerAfter}${centerStyle}`, centerIndex);\r\n            self.calendarContainer.style.left = `${centerLeft}px`;\r\n            self.calendarContainer.style.right = \"auto\";\r\n        }\r\n    }\r\n    function getDocumentStyleSheet() {\r\n        let editableSheet = null;\r\n        for (let i = 0; i < document.styleSheets.length; i++) {\r\n            const sheet = document.styleSheets[i];\r\n            try {\r\n                sheet.cssRules;\r\n            }\r\n            catch (err) {\r\n                continue;\r\n            }\r\n            editableSheet = sheet;\r\n            break;\r\n        }\r\n        return editableSheet != null ? editableSheet : createStyleSheet();\r\n    }\r\n    function createStyleSheet() {\r\n        const style = document.createElement(\"style\");\r\n        document.head.appendChild(style);\r\n        return style.sheet;\r\n    }\r\n    function redraw() {\r\n        if (self.config.noCalendar || self.isMobile)\r\n            return;\r\n        buildMonthSwitch();\r\n        updateNavigationCurrentMonth();\r\n        buildDays();\r\n    }\r\n    function focusAndClose() {\r\n        self._input.focus();\r\n        if (window.navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\r\n            navigator.msMaxTouchPoints !== undefined) {\r\n            setTimeout(self.close, 0);\r\n        }\r\n        else {\r\n            self.close();\r\n        }\r\n    }\r\n    function selectDate(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const isSelectable = (day) => day.classList &&\r\n            day.classList.contains(\"flatpickr-day\") &&\r\n            !day.classList.contains(\"flatpickr-disabled\") &&\r\n            !day.classList.contains(\"notAllowed\");\r\n        const t = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.findParent)((0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.getEventTarget)(e), isSelectable);\r\n        if (t === undefined)\r\n            return;\r\n        const target = t;\r\n        const selectedDate = (self.latestSelectedDateObj = new Date(target.dateObj.getTime()));\r\n        const shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth ||\r\n            selectedDate.getMonth() >\r\n                self.currentMonth + self.config.showMonths - 1) &&\r\n            self.config.mode !== \"range\";\r\n        self.selectedDateElem = target;\r\n        if (self.config.mode === \"single\")\r\n            self.selectedDates = [selectedDate];\r\n        else if (self.config.mode === \"multiple\") {\r\n            const selectedIndex = isDateSelected(selectedDate);\r\n            if (selectedIndex)\r\n                self.selectedDates.splice(parseInt(selectedIndex), 1);\r\n            else\r\n                self.selectedDates.push(selectedDate);\r\n        }\r\n        else if (self.config.mode === \"range\") {\r\n            if (self.selectedDates.length === 2) {\r\n                self.clear(false, false);\r\n            }\r\n            self.latestSelectedDateObj = selectedDate;\r\n            self.selectedDates.push(selectedDate);\r\n            if ((0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.compareDates)(selectedDate, self.selectedDates[0], true) !== 0)\r\n                self.selectedDates.sort((a, b) => a.getTime() - b.getTime());\r\n        }\r\n        setHoursFromInputs();\r\n        if (shouldChangeMonth) {\r\n            const isNewYear = self.currentYear !== selectedDate.getFullYear();\r\n            self.currentYear = selectedDate.getFullYear();\r\n            self.currentMonth = selectedDate.getMonth();\r\n            if (isNewYear) {\r\n                triggerEvent(\"onYearChange\");\r\n                buildMonthSwitch();\r\n            }\r\n            triggerEvent(\"onMonthChange\");\r\n        }\r\n        updateNavigationCurrentMonth();\r\n        buildDays();\r\n        updateValue();\r\n        if (!shouldChangeMonth &&\r\n            self.config.mode !== \"range\" &&\r\n            self.config.showMonths === 1)\r\n            focusOnDayElem(target);\r\n        else if (self.selectedDateElem !== undefined &&\r\n            self.hourElement === undefined) {\r\n            self.selectedDateElem && self.selectedDateElem.focus();\r\n        }\r\n        if (self.hourElement !== undefined)\r\n            self.hourElement !== undefined && self.hourElement.focus();\r\n        if (self.config.closeOnSelect) {\r\n            const single = self.config.mode === \"single\" && !self.config.enableTime;\r\n            const range = self.config.mode === \"range\" &&\r\n                self.selectedDates.length === 2 &&\r\n                !self.config.enableTime;\r\n            if (single || range) {\r\n                focusAndClose();\r\n            }\r\n        }\r\n        triggerChange();\r\n    }\r\n    const CALLBACKS = {\r\n        locale: [setupLocale, updateWeekdays],\r\n        showMonths: [buildMonths, setCalendarWidth, buildWeekdays],\r\n        minDate: [jumpToDate],\r\n        maxDate: [jumpToDate],\r\n        clickOpens: [\r\n            () => {\r\n                if (self.config.clickOpens === true) {\r\n                    bind(self._input, \"focus\", self.open);\r\n                    bind(self._input, \"click\", self.open);\r\n                }\r\n                else {\r\n                    self._input.removeEventListener(\"focus\", self.open);\r\n                    self._input.removeEventListener(\"click\", self.open);\r\n                }\r\n            },\r\n        ],\r\n    };\r\n    function set(option, value) {\r\n        if (option !== null && typeof option === \"object\") {\r\n            Object.assign(self.config, option);\r\n            for (const key in option) {\r\n                if (CALLBACKS[key] !== undefined)\r\n                    CALLBACKS[key].forEach((x) => x());\r\n            }\r\n        }\r\n        else {\r\n            self.config[option] = value;\r\n            if (CALLBACKS[option] !== undefined)\r\n                CALLBACKS[option].forEach((x) => x());\r\n            else if (_types_options__WEBPACK_IMPORTED_MODULE_0__.HOOKS.indexOf(option) > -1)\r\n                self.config[option] = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.arrayify)(value);\r\n        }\r\n        self.redraw();\r\n        updateValue(true);\r\n    }\r\n    function setSelectedDate(inputDate, format) {\r\n        let dates = [];\r\n        if (inputDate instanceof Array)\r\n            dates = inputDate.map((d) => self.parseDate(d, format));\r\n        else if (inputDate instanceof Date || typeof inputDate === \"number\")\r\n            dates = [self.parseDate(inputDate, format)];\r\n        else if (typeof inputDate === \"string\") {\r\n            switch (self.config.mode) {\r\n                case \"single\":\r\n                case \"time\":\r\n                    dates = [self.parseDate(inputDate, format)];\r\n                    break;\r\n                case \"multiple\":\r\n                    dates = inputDate\r\n                        .split(self.config.conjunction)\r\n                        .map((date) => self.parseDate(date, format));\r\n                    break;\r\n                case \"range\":\r\n                    dates = inputDate\r\n                        .split(self.l10n.rangeSeparator)\r\n                        .map((date) => self.parseDate(date, format));\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        else\r\n            self.config.errorHandler(new Error(`Invalid date supplied: ${JSON.stringify(inputDate)}`));\r\n        self.selectedDates = (self.config.allowInvalidPreload\r\n            ? dates\r\n            : dates.filter((d) => d instanceof Date && isEnabled(d, false)));\r\n        if (self.config.mode === \"range\")\r\n            self.selectedDates.sort((a, b) => a.getTime() - b.getTime());\r\n    }\r\n    function setDate(date, triggerChange = false, format = self.config.dateFormat) {\r\n        if ((date !== 0 && !date) || (date instanceof Array && date.length === 0))\r\n            return self.clear(triggerChange);\r\n        setSelectedDate(date, format);\r\n        self.latestSelectedDateObj =\r\n            self.selectedDates[self.selectedDates.length - 1];\r\n        self.redraw();\r\n        jumpToDate(undefined, triggerChange);\r\n        setHoursFromDate();\r\n        if (self.selectedDates.length === 0) {\r\n            self.clear(false);\r\n        }\r\n        updateValue(triggerChange);\r\n        if (triggerChange)\r\n            triggerEvent(\"onChange\");\r\n    }\r\n    function parseDateRules(arr) {\r\n        return arr\r\n            .slice()\r\n            .map((rule) => {\r\n            if (typeof rule === \"string\" ||\r\n                typeof rule === \"number\" ||\r\n                rule instanceof Date) {\r\n                return self.parseDate(rule, undefined, true);\r\n            }\r\n            else if (rule &&\r\n                typeof rule === \"object\" &&\r\n                rule.from &&\r\n                rule.to)\r\n                return {\r\n                    from: self.parseDate(rule.from, undefined),\r\n                    to: self.parseDate(rule.to, undefined),\r\n                };\r\n            return rule;\r\n        })\r\n            .filter((x) => x);\r\n    }\r\n    function setupDates() {\r\n        self.selectedDates = [];\r\n        self.now = self.parseDate(self.config.now) || new Date();\r\n        const preloadedDate = self.config.defaultDate ||\r\n            ((self.input.nodeName === \"INPUT\" ||\r\n                self.input.nodeName === \"TEXTAREA\") &&\r\n                self.input.placeholder &&\r\n                self.input.value === self.input.placeholder\r\n                ? null\r\n                : self.input.value);\r\n        if (preloadedDate)\r\n            setSelectedDate(preloadedDate, self.config.dateFormat);\r\n        self._initialDate =\r\n            self.selectedDates.length > 0\r\n                ? self.selectedDates[0]\r\n                : self.config.minDate &&\r\n                    self.config.minDate.getTime() > self.now.getTime()\r\n                    ? self.config.minDate\r\n                    : self.config.maxDate &&\r\n                        self.config.maxDate.getTime() < self.now.getTime()\r\n                        ? self.config.maxDate\r\n                        : self.now;\r\n        self.currentYear = self._initialDate.getFullYear();\r\n        self.currentMonth = self._initialDate.getMonth();\r\n        if (self.selectedDates.length > 0)\r\n            self.latestSelectedDateObj = self.selectedDates[0];\r\n        if (self.config.minTime !== undefined)\r\n            self.config.minTime = self.parseDate(self.config.minTime, \"H:i\");\r\n        if (self.config.maxTime !== undefined)\r\n            self.config.maxTime = self.parseDate(self.config.maxTime, \"H:i\");\r\n        self.minDateHasTime =\r\n            !!self.config.minDate &&\r\n                (self.config.minDate.getHours() > 0 ||\r\n                    self.config.minDate.getMinutes() > 0 ||\r\n                    self.config.minDate.getSeconds() > 0);\r\n        self.maxDateHasTime =\r\n            !!self.config.maxDate &&\r\n                (self.config.maxDate.getHours() > 0 ||\r\n                    self.config.maxDate.getMinutes() > 0 ||\r\n                    self.config.maxDate.getSeconds() > 0);\r\n    }\r\n    function setupInputs() {\r\n        self.input = getInputElem();\r\n        if (!self.input) {\r\n            self.config.errorHandler(new Error(\"Invalid input element specified\"));\r\n            return;\r\n        }\r\n        self.input._type = self.input.type;\r\n        self.input.type = \"text\";\r\n        self.input.classList.add(\"flatpickr-input\");\r\n        self._input = self.input;\r\n        if (self.config.altInput) {\r\n            self.altInput = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(self.input.nodeName, self.config.altInputClass);\r\n            self._input = self.altInput;\r\n            self.altInput.placeholder = self.input.placeholder;\r\n            self.altInput.disabled = self.input.disabled;\r\n            self.altInput.required = self.input.required;\r\n            self.altInput.tabIndex = self.input.tabIndex;\r\n            self.altInput.type = \"text\";\r\n            self.input.setAttribute(\"type\", \"hidden\");\r\n            if (!self.config.static && self.input.parentNode)\r\n                self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);\r\n        }\r\n        if (!self.config.allowInput)\r\n            self._input.setAttribute(\"readonly\", \"readonly\");\r\n        self._positionElement = self.config.positionElement || self._input;\r\n    }\r\n    function setupMobile() {\r\n        const inputType = self.config.enableTime\r\n            ? self.config.noCalendar\r\n                ? \"time\"\r\n                : \"datetime-local\"\r\n            : \"date\";\r\n        self.mobileInput = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.createElement)(\"input\", self.input.className + \" flatpickr-mobile\");\r\n        self.mobileInput.tabIndex = 1;\r\n        self.mobileInput.type = inputType;\r\n        self.mobileInput.disabled = self.input.disabled;\r\n        self.mobileInput.required = self.input.required;\r\n        self.mobileInput.placeholder = self.input.placeholder;\r\n        self.mobileFormatStr =\r\n            inputType === \"datetime-local\"\r\n                ? \"Y-m-d\\\\TH:i:S\"\r\n                : inputType === \"date\"\r\n                    ? \"Y-m-d\"\r\n                    : \"H:i:S\";\r\n        if (self.selectedDates.length > 0) {\r\n            self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);\r\n        }\r\n        if (self.config.minDate)\r\n            self.mobileInput.min = self.formatDate(self.config.minDate, \"Y-m-d\");\r\n        if (self.config.maxDate)\r\n            self.mobileInput.max = self.formatDate(self.config.maxDate, \"Y-m-d\");\r\n        if (self.input.getAttribute(\"step\"))\r\n            self.mobileInput.step = String(self.input.getAttribute(\"step\"));\r\n        self.input.type = \"hidden\";\r\n        if (self.altInput !== undefined)\r\n            self.altInput.type = \"hidden\";\r\n        try {\r\n            if (self.input.parentNode)\r\n                self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);\r\n        }\r\n        catch (_a) { }\r\n        bind(self.mobileInput, \"change\", (e) => {\r\n            self.setDate((0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.getEventTarget)(e).value, false, self.mobileFormatStr);\r\n            triggerEvent(\"onChange\");\r\n            triggerEvent(\"onClose\");\r\n        });\r\n    }\r\n    function toggle(e) {\r\n        if (self.isOpen === true)\r\n            return self.close();\r\n        self.open(e);\r\n    }\r\n    function triggerEvent(event, data) {\r\n        if (self.config === undefined)\r\n            return;\r\n        const hooks = self.config[event];\r\n        if (hooks !== undefined && hooks.length > 0) {\r\n            for (let i = 0; hooks[i] && i < hooks.length; i++)\r\n                hooks[i](self.selectedDates, self.input.value, self, data);\r\n        }\r\n        if (event === \"onChange\") {\r\n            self.input.dispatchEvent(createEvent(\"change\"));\r\n            self.input.dispatchEvent(createEvent(\"input\"));\r\n        }\r\n    }\r\n    function createEvent(name) {\r\n        const e = document.createEvent(\"Event\");\r\n        e.initEvent(name, true, true);\r\n        return e;\r\n    }\r\n    function isDateSelected(date) {\r\n        for (let i = 0; i < self.selectedDates.length; i++) {\r\n            if ((0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.compareDates)(self.selectedDates[i], date) === 0)\r\n                return \"\" + i;\r\n        }\r\n        return false;\r\n    }\r\n    function isDateInRange(date) {\r\n        if (self.config.mode !== \"range\" || self.selectedDates.length < 2)\r\n            return false;\r\n        return ((0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.compareDates)(date, self.selectedDates[0]) >= 0 &&\r\n            (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.compareDates)(date, self.selectedDates[1]) <= 0);\r\n    }\r\n    function updateNavigationCurrentMonth() {\r\n        if (self.config.noCalendar || self.isMobile || !self.monthNav)\r\n            return;\r\n        self.yearElements.forEach((yearElement, i) => {\r\n            const d = new Date(self.currentYear, self.currentMonth, 1);\r\n            d.setMonth(self.currentMonth + i);\r\n            if (self.config.showMonths > 1 ||\r\n                self.config.monthSelectorType === \"static\") {\r\n                self.monthElements[i].textContent =\r\n                    (0,_utils_formatting__WEBPACK_IMPORTED_MODULE_5__.monthToStr)(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + \" \";\r\n            }\r\n            else {\r\n                self.monthsDropdownContainer.value = d.getMonth().toString();\r\n            }\r\n            yearElement.value = d.getFullYear().toString();\r\n        });\r\n        self._hidePrevMonthArrow =\r\n            self.config.minDate !== undefined &&\r\n                (self.currentYear === self.config.minDate.getFullYear()\r\n                    ? self.currentMonth <= self.config.minDate.getMonth()\r\n                    : self.currentYear < self.config.minDate.getFullYear());\r\n        self._hideNextMonthArrow =\r\n            self.config.maxDate !== undefined &&\r\n                (self.currentYear === self.config.maxDate.getFullYear()\r\n                    ? self.currentMonth + 1 > self.config.maxDate.getMonth()\r\n                    : self.currentYear > self.config.maxDate.getFullYear());\r\n    }\r\n    function getDateStr(format) {\r\n        return self.selectedDates\r\n            .map((dObj) => self.formatDate(dObj, format))\r\n            .filter((d, i, arr) => self.config.mode !== \"range\" ||\r\n            self.config.enableTime ||\r\n            arr.indexOf(d) === i)\r\n            .join(self.config.mode !== \"range\"\r\n            ? self.config.conjunction\r\n            : self.l10n.rangeSeparator);\r\n    }\r\n    function updateValue(triggerChange = true) {\r\n        if (self.mobileInput !== undefined && self.mobileFormatStr) {\r\n            self.mobileInput.value =\r\n                self.latestSelectedDateObj !== undefined\r\n                    ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr)\r\n                    : \"\";\r\n        }\r\n        self.input.value = getDateStr(self.config.dateFormat);\r\n        if (self.altInput !== undefined) {\r\n            self.altInput.value = getDateStr(self.config.altFormat);\r\n        }\r\n        if (triggerChange !== false)\r\n            triggerEvent(\"onValueUpdate\");\r\n    }\r\n    function onMonthNavClick(e) {\r\n        const eventTarget = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.getEventTarget)(e);\r\n        const isPrevMonth = self.prevMonthNav.contains(eventTarget);\r\n        const isNextMonth = self.nextMonthNav.contains(eventTarget);\r\n        if (isPrevMonth || isNextMonth) {\r\n            changeMonth(isPrevMonth ? -1 : 1);\r\n        }\r\n        else if (self.yearElements.indexOf(eventTarget) >= 0) {\r\n            eventTarget.select();\r\n        }\r\n        else if (eventTarget.classList.contains(\"arrowUp\")) {\r\n            self.changeYear(self.currentYear + 1);\r\n        }\r\n        else if (eventTarget.classList.contains(\"arrowDown\")) {\r\n            self.changeYear(self.currentYear - 1);\r\n        }\r\n    }\r\n    function timeWrapper(e) {\r\n        e.preventDefault();\r\n        const isKeyDown = e.type === \"keydown\", eventTarget = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_3__.getEventTarget)(e), input = eventTarget;\r\n        if (self.amPM !== undefined && eventTarget === self.amPM) {\r\n            self.amPM.textContent =\r\n                self.l10n.amPM[(0,_utils__WEBPACK_IMPORTED_MODULE_2__.int)(self.amPM.textContent === self.l10n.amPM[0])];\r\n        }\r\n        const min = parseFloat(input.getAttribute(\"min\")), max = parseFloat(input.getAttribute(\"max\")), step = parseFloat(input.getAttribute(\"step\")), curValue = parseInt(input.value, 10), delta = e.delta ||\r\n            (isKeyDown ? (e.which === 38 ? 1 : -1) : 0);\r\n        let newValue = curValue + step * delta;\r\n        if (typeof input.value !== \"undefined\" && input.value.length === 2) {\r\n            const isHourElem = input === self.hourElement, isMinuteElem = input === self.minuteElement;\r\n            if (newValue < min) {\r\n                newValue =\r\n                    max +\r\n                        newValue +\r\n                        (0,_utils__WEBPACK_IMPORTED_MODULE_2__.int)(!isHourElem) +\r\n                        ((0,_utils__WEBPACK_IMPORTED_MODULE_2__.int)(isHourElem) && (0,_utils__WEBPACK_IMPORTED_MODULE_2__.int)(!self.amPM));\r\n                if (isMinuteElem)\r\n                    incrementNumInput(undefined, -1, self.hourElement);\r\n            }\r\n            else if (newValue > max) {\r\n                newValue =\r\n                    input === self.hourElement ? newValue - max - (0,_utils__WEBPACK_IMPORTED_MODULE_2__.int)(!self.amPM) : min;\r\n                if (isMinuteElem)\r\n                    incrementNumInput(undefined, 1, self.hourElement);\r\n            }\r\n            if (self.amPM &&\r\n                isHourElem &&\r\n                (step === 1\r\n                    ? newValue + curValue === 23\r\n                    : Math.abs(newValue - curValue) > step)) {\r\n                self.amPM.textContent =\r\n                    self.l10n.amPM[(0,_utils__WEBPACK_IMPORTED_MODULE_2__.int)(self.amPM.textContent === self.l10n.amPM[0])];\r\n            }\r\n            input.value = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.pad)(newValue);\r\n        }\r\n    }\r\n    init();\r\n    return self;\r\n}\r\nfunction _flatpickr(nodeList, config) {\r\n    const nodes = Array.prototype.slice\r\n        .call(nodeList)\r\n        .filter((x) => x instanceof HTMLElement);\r\n    const instances = [];\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        const node = nodes[i];\r\n        try {\r\n            if (node.getAttribute(\"data-fp-omit\") !== null)\r\n                continue;\r\n            if (node._flatpickr !== undefined) {\r\n                node._flatpickr.destroy();\r\n                node._flatpickr = undefined;\r\n            }\r\n            node._flatpickr = FlatpickrInstance(node, config || {});\r\n            instances.push(node._flatpickr);\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n    return instances.length === 1 ? instances[0] : instances;\r\n}\r\nif (typeof HTMLElement !== \"undefined\" &&\r\n    typeof HTMLCollection !== \"undefined\" &&\r\n    typeof NodeList !== \"undefined\") {\r\n    HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function (config) {\r\n        return _flatpickr(this, config);\r\n    };\r\n    HTMLElement.prototype.flatpickr = function (config) {\r\n        return _flatpickr([this], config);\r\n    };\r\n}\r\nvar flatpickr = function (selector, config) {\r\n    if (typeof selector === \"string\") {\r\n        return _flatpickr(window.document.querySelectorAll(selector), config);\r\n    }\r\n    else if (selector instanceof Node) {\r\n        return _flatpickr([selector], config);\r\n    }\r\n    else {\r\n        return _flatpickr(selector, config);\r\n    }\r\n};\r\nflatpickr.defaultConfig = {};\r\nflatpickr.l10ns = {\r\n    en: Object.assign({}, _l10n_default__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\r\n    default: Object.assign({}, _l10n_default__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\r\n};\r\nflatpickr.localize = (l10n) => {\r\n    flatpickr.l10ns.default = Object.assign(Object.assign({}, flatpickr.l10ns.default), l10n);\r\n};\r\nflatpickr.setDefaults = (config) => {\r\n    flatpickr.defaultConfig = Object.assign(Object.assign({}, flatpickr.defaultConfig), config);\r\n};\r\nflatpickr.parseDate = (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.createDateParser)({});\r\nflatpickr.formatDate = (0,_utils_dates__WEBPACK_IMPORTED_MODULE_4__.createDateFormatter)({});\r\nflatpickr.compareDates = _utils_dates__WEBPACK_IMPORTED_MODULE_4__.compareDates;\r\nif (typeof jQuery !== \"undefined\" && typeof jQuery.fn !== \"undefined\") {\r\n    jQuery.fn.flatpickr = function (config) {\r\n        return _flatpickr(this, config);\r\n    };\r\n}\r\nDate.prototype.fp_incr = function (days) {\r\n    return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === \"string\" ? parseInt(days, 10) : days));\r\n};\r\nif (typeof window !== \"undefined\") {\r\n    window.flatpickr = flatpickr;\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (flatpickr);\r\n\n\n//# sourceURL=webpack://falcon/./node_modules/flatpickr/dist/esm/index.js?");

/***/ }),

/***/ "./node_modules/flatpickr/dist/esm/l10n/default.js":
/*!*********************************************************!*\
  !*** ./node_modules/flatpickr/dist/esm/l10n/default.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"english\": function() { return /* binding */ english; }\n/* harmony export */ });\nconst english = {\r\n    weekdays: {\r\n        shorthand: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\r\n        longhand: [\r\n            \"Sunday\",\r\n            \"Monday\",\r\n            \"Tuesday\",\r\n            \"Wednesday\",\r\n            \"Thursday\",\r\n            \"Friday\",\r\n            \"Saturday\",\r\n        ],\r\n    },\r\n    months: {\r\n        shorthand: [\r\n            \"Jan\",\r\n            \"Feb\",\r\n            \"Mar\",\r\n            \"Apr\",\r\n            \"May\",\r\n            \"Jun\",\r\n            \"Jul\",\r\n            \"Aug\",\r\n            \"Sep\",\r\n            \"Oct\",\r\n            \"Nov\",\r\n            \"Dec\",\r\n        ],\r\n        longhand: [\r\n            \"January\",\r\n            \"February\",\r\n            \"March\",\r\n            \"April\",\r\n            \"May\",\r\n            \"June\",\r\n            \"July\",\r\n            \"August\",\r\n            \"September\",\r\n            \"October\",\r\n            \"November\",\r\n            \"December\",\r\n        ],\r\n    },\r\n    daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\r\n    firstDayOfWeek: 0,\r\n    ordinal: (nth) => {\r\n        const s = nth % 100;\r\n        if (s > 3 && s < 21)\r\n            return \"th\";\r\n        switch (s % 10) {\r\n            case 1:\r\n                return \"st\";\r\n            case 2:\r\n                return \"nd\";\r\n            case 3:\r\n                return \"rd\";\r\n            default:\r\n                return \"th\";\r\n        }\r\n    },\r\n    rangeSeparator: \" to \",\r\n    weekAbbreviation: \"Wk\",\r\n    scrollTitle: \"Scroll to increment\",\r\n    toggleTitle: \"Click to toggle\",\r\n    amPM: [\"AM\", \"PM\"],\r\n    yearAriaLabel: \"Year\",\r\n    monthAriaLabel: \"Month\",\r\n    hourAriaLabel: \"Hour\",\r\n    minuteAriaLabel: \"Minute\",\r\n    time_24hr: false,\r\n};\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (english);\r\n\n\n//# sourceURL=webpack://falcon/./node_modules/flatpickr/dist/esm/l10n/default.js?");

/***/ }),

/***/ "./node_modules/flatpickr/dist/esm/types/options.js":
/*!**********************************************************!*\
  !*** ./node_modules/flatpickr/dist/esm/types/options.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HOOKS\": function() { return /* binding */ HOOKS; },\n/* harmony export */   \"defaults\": function() { return /* binding */ defaults; }\n/* harmony export */ });\nconst HOOKS = [\r\n    \"onChange\",\r\n    \"onClose\",\r\n    \"onDayCreate\",\r\n    \"onDestroy\",\r\n    \"onKeyDown\",\r\n    \"onMonthChange\",\r\n    \"onOpen\",\r\n    \"onParseConfig\",\r\n    \"onReady\",\r\n    \"onValueUpdate\",\r\n    \"onYearChange\",\r\n    \"onPreCalendarPosition\",\r\n];\r\nconst defaults = {\r\n    _disable: [],\r\n    allowInput: false,\r\n    allowInvalidPreload: false,\r\n    altFormat: \"F j, Y\",\r\n    altInput: false,\r\n    altInputClass: \"form-control input\",\r\n    animate: typeof window === \"object\" &&\r\n        window.navigator.userAgent.indexOf(\"MSIE\") === -1,\r\n    ariaDateFormat: \"F j, Y\",\r\n    autoFillDefaultTime: true,\r\n    clickOpens: true,\r\n    closeOnSelect: true,\r\n    conjunction: \", \",\r\n    dateFormat: \"Y-m-d\",\r\n    defaultHour: 12,\r\n    defaultMinute: 0,\r\n    defaultSeconds: 0,\r\n    disable: [],\r\n    disableMobile: false,\r\n    enableSeconds: false,\r\n    enableTime: false,\r\n    errorHandler: (err) => typeof console !== \"undefined\" && console.warn(err),\r\n    getWeek: (givenDate) => {\r\n        const date = new Date(givenDate.getTime());\r\n        date.setHours(0, 0, 0, 0);\r\n        date.setDate(date.getDate() + 3 - ((date.getDay() + 6) % 7));\r\n        var week1 = new Date(date.getFullYear(), 0, 4);\r\n        return (1 +\r\n            Math.round(((date.getTime() - week1.getTime()) / 86400000 -\r\n                3 +\r\n                ((week1.getDay() + 6) % 7)) /\r\n                7));\r\n    },\r\n    hourIncrement: 1,\r\n    ignoredFocusElements: [],\r\n    inline: false,\r\n    locale: \"default\",\r\n    minuteIncrement: 5,\r\n    mode: \"single\",\r\n    monthSelectorType: \"dropdown\",\r\n    nextArrow: \"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>\",\r\n    noCalendar: false,\r\n    now: new Date(),\r\n    onChange: [],\r\n    onClose: [],\r\n    onDayCreate: [],\r\n    onDestroy: [],\r\n    onKeyDown: [],\r\n    onMonthChange: [],\r\n    onOpen: [],\r\n    onParseConfig: [],\r\n    onReady: [],\r\n    onValueUpdate: [],\r\n    onYearChange: [],\r\n    onPreCalendarPosition: [],\r\n    plugins: [],\r\n    position: \"auto\",\r\n    positionElement: undefined,\r\n    prevArrow: \"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>\",\r\n    shorthandCurrentMonth: false,\r\n    showMonths: 1,\r\n    static: false,\r\n    time_24hr: false,\r\n    weekNumbers: false,\r\n    wrap: false,\r\n};\r\n\n\n//# sourceURL=webpack://falcon/./node_modules/flatpickr/dist/esm/types/options.js?");

/***/ }),

/***/ "./node_modules/flatpickr/dist/esm/utils/dates.js":
/*!********************************************************!*\
  !*** ./node_modules/flatpickr/dist/esm/utils/dates.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createDateFormatter\": function() { return /* binding */ createDateFormatter; },\n/* harmony export */   \"createDateParser\": function() { return /* binding */ createDateParser; },\n/* harmony export */   \"compareDates\": function() { return /* binding */ compareDates; },\n/* harmony export */   \"compareTimes\": function() { return /* binding */ compareTimes; },\n/* harmony export */   \"isBetween\": function() { return /* binding */ isBetween; },\n/* harmony export */   \"duration\": function() { return /* binding */ duration; },\n/* harmony export */   \"getDefaultHours\": function() { return /* binding */ getDefaultHours; }\n/* harmony export */ });\n/* harmony import */ var _formatting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formatting */ \"./node_modules/flatpickr/dist/esm/utils/formatting.js\");\n/* harmony import */ var _types_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/options */ \"./node_modules/flatpickr/dist/esm/types/options.js\");\n/* harmony import */ var _l10n_default__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../l10n/default */ \"./node_modules/flatpickr/dist/esm/l10n/default.js\");\n\r\n\r\n\r\nconst createDateFormatter = ({ config = _types_options__WEBPACK_IMPORTED_MODULE_1__.defaults, l10n = _l10n_default__WEBPACK_IMPORTED_MODULE_2__.english, isMobile = false, }) => (dateObj, frmt, overrideLocale) => {\r\n    const locale = overrideLocale || l10n;\r\n    if (config.formatDate !== undefined && !isMobile) {\r\n        return config.formatDate(dateObj, frmt, locale);\r\n    }\r\n    return frmt\r\n        .split(\"\")\r\n        .map((c, i, arr) => _formatting__WEBPACK_IMPORTED_MODULE_0__.formats[c] && arr[i - 1] !== \"\\\\\"\r\n        ? _formatting__WEBPACK_IMPORTED_MODULE_0__.formats[c](dateObj, locale, config)\r\n        : c !== \"\\\\\"\r\n            ? c\r\n            : \"\")\r\n        .join(\"\");\r\n};\r\nconst createDateParser = ({ config = _types_options__WEBPACK_IMPORTED_MODULE_1__.defaults, l10n = _l10n_default__WEBPACK_IMPORTED_MODULE_2__.english }) => (date, givenFormat, timeless, customLocale) => {\r\n    if (date !== 0 && !date)\r\n        return undefined;\r\n    const locale = customLocale || l10n;\r\n    let parsedDate;\r\n    const dateOrig = date;\r\n    if (date instanceof Date)\r\n        parsedDate = new Date(date.getTime());\r\n    else if (typeof date !== \"string\" &&\r\n        date.toFixed !== undefined)\r\n        parsedDate = new Date(date);\r\n    else if (typeof date === \"string\") {\r\n        const format = givenFormat || (config || _types_options__WEBPACK_IMPORTED_MODULE_1__.defaults).dateFormat;\r\n        const datestr = String(date).trim();\r\n        if (datestr === \"today\") {\r\n            parsedDate = new Date();\r\n            timeless = true;\r\n        }\r\n        else if (/Z$/.test(datestr) ||\r\n            /GMT$/.test(datestr))\r\n            parsedDate = new Date(date);\r\n        else if (config && config.parseDate)\r\n            parsedDate = config.parseDate(date, format);\r\n        else {\r\n            parsedDate =\r\n                !config || !config.noCalendar\r\n                    ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0)\r\n                    : new Date(new Date().setHours(0, 0, 0, 0));\r\n            let matched, ops = [];\r\n            for (let i = 0, matchIndex = 0, regexStr = \"\"; i < format.length; i++) {\r\n                const token = format[i];\r\n                const isBackSlash = token === \"\\\\\";\r\n                const escaped = format[i - 1] === \"\\\\\" || isBackSlash;\r\n                if (_formatting__WEBPACK_IMPORTED_MODULE_0__.tokenRegex[token] && !escaped) {\r\n                    regexStr += _formatting__WEBPACK_IMPORTED_MODULE_0__.tokenRegex[token];\r\n                    const match = new RegExp(regexStr).exec(date);\r\n                    if (match && (matched = true)) {\r\n                        ops[token !== \"Y\" ? \"push\" : \"unshift\"]({\r\n                            fn: _formatting__WEBPACK_IMPORTED_MODULE_0__.revFormat[token],\r\n                            val: match[++matchIndex],\r\n                        });\r\n                    }\r\n                }\r\n                else if (!isBackSlash)\r\n                    regexStr += \".\";\r\n                ops.forEach(({ fn, val }) => (parsedDate = fn(parsedDate, val, locale) || parsedDate));\r\n            }\r\n            parsedDate = matched ? parsedDate : undefined;\r\n        }\r\n    }\r\n    if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {\r\n        config.errorHandler(new Error(`Invalid date provided: ${dateOrig}`));\r\n        return undefined;\r\n    }\r\n    if (timeless === true)\r\n        parsedDate.setHours(0, 0, 0, 0);\r\n    return parsedDate;\r\n};\r\nfunction compareDates(date1, date2, timeless = true) {\r\n    if (timeless !== false) {\r\n        return (new Date(date1.getTime()).setHours(0, 0, 0, 0) -\r\n            new Date(date2.getTime()).setHours(0, 0, 0, 0));\r\n    }\r\n    return date1.getTime() - date2.getTime();\r\n}\r\nfunction compareTimes(date1, date2) {\r\n    return (3600 * (date1.getHours() - date2.getHours()) +\r\n        60 * (date1.getMinutes() - date2.getMinutes()) +\r\n        date1.getSeconds() -\r\n        date2.getSeconds());\r\n}\r\nconst isBetween = (ts, ts1, ts2) => {\r\n    return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);\r\n};\r\nconst duration = {\r\n    DAY: 86400000,\r\n};\r\nfunction getDefaultHours(config) {\r\n    let hours = config.defaultHour;\r\n    let minutes = config.defaultMinute;\r\n    let seconds = config.defaultSeconds;\r\n    if (config.minDate !== undefined) {\r\n        const minHour = config.minDate.getHours();\r\n        const minMinutes = config.minDate.getMinutes();\r\n        const minSeconds = config.minDate.getSeconds();\r\n        if (hours < minHour) {\r\n            hours = minHour;\r\n        }\r\n        if (hours === minHour && minutes < minMinutes) {\r\n            minutes = minMinutes;\r\n        }\r\n        if (hours === minHour && minutes === minMinutes && seconds < minSeconds)\r\n            seconds = config.minDate.getSeconds();\r\n    }\r\n    if (config.maxDate !== undefined) {\r\n        const maxHr = config.maxDate.getHours();\r\n        const maxMinutes = config.maxDate.getMinutes();\r\n        hours = Math.min(hours, maxHr);\r\n        if (hours === maxHr)\r\n            minutes = Math.min(maxMinutes, minutes);\r\n        if (hours === maxHr && minutes === maxMinutes)\r\n            seconds = config.maxDate.getSeconds();\r\n    }\r\n    return { hours, minutes, seconds };\r\n}\r\n\n\n//# sourceURL=webpack://falcon/./node_modules/flatpickr/dist/esm/utils/dates.js?");

/***/ }),

/***/ "./node_modules/flatpickr/dist/esm/utils/dom.js":
/*!******************************************************!*\
  !*** ./node_modules/flatpickr/dist/esm/utils/dom.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"toggleClass\": function() { return /* binding */ toggleClass; },\n/* harmony export */   \"createElement\": function() { return /* binding */ createElement; },\n/* harmony export */   \"clearNode\": function() { return /* binding */ clearNode; },\n/* harmony export */   \"findParent\": function() { return /* binding */ findParent; },\n/* harmony export */   \"createNumberInput\": function() { return /* binding */ createNumberInput; },\n/* harmony export */   \"getEventTarget\": function() { return /* binding */ getEventTarget; }\n/* harmony export */ });\nfunction toggleClass(elem, className, bool) {\r\n    if (bool === true)\r\n        return elem.classList.add(className);\r\n    elem.classList.remove(className);\r\n}\r\nfunction createElement(tag, className, content) {\r\n    const e = window.document.createElement(tag);\r\n    className = className || \"\";\r\n    content = content || \"\";\r\n    e.className = className;\r\n    if (content !== undefined)\r\n        e.textContent = content;\r\n    return e;\r\n}\r\nfunction clearNode(node) {\r\n    while (node.firstChild)\r\n        node.removeChild(node.firstChild);\r\n}\r\nfunction findParent(node, condition) {\r\n    if (condition(node))\r\n        return node;\r\n    else if (node.parentNode)\r\n        return findParent(node.parentNode, condition);\r\n    return undefined;\r\n}\r\nfunction createNumberInput(inputClassName, opts) {\r\n    const wrapper = createElement(\"div\", \"numInputWrapper\"), numInput = createElement(\"input\", \"numInput \" + inputClassName), arrowUp = createElement(\"span\", \"arrowUp\"), arrowDown = createElement(\"span\", \"arrowDown\");\r\n    if (navigator.userAgent.indexOf(\"MSIE 9.0\") === -1) {\r\n        numInput.type = \"number\";\r\n    }\r\n    else {\r\n        numInput.type = \"text\";\r\n        numInput.pattern = \"\\\\d*\";\r\n    }\r\n    if (opts !== undefined)\r\n        for (const key in opts)\r\n            numInput.setAttribute(key, opts[key]);\r\n    wrapper.appendChild(numInput);\r\n    wrapper.appendChild(arrowUp);\r\n    wrapper.appendChild(arrowDown);\r\n    return wrapper;\r\n}\r\nfunction getEventTarget(event) {\r\n    try {\r\n        if (typeof event.composedPath === \"function\") {\r\n            const path = event.composedPath();\r\n            return path[0];\r\n        }\r\n        return event.target;\r\n    }\r\n    catch (error) {\r\n        return event.target;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://falcon/./node_modules/flatpickr/dist/esm/utils/dom.js?");

/***/ }),

/***/ "./node_modules/flatpickr/dist/esm/utils/formatting.js":
/*!*************************************************************!*\
  !*** ./node_modules/flatpickr/dist/esm/utils/formatting.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"monthToStr\": function() { return /* binding */ monthToStr; },\n/* harmony export */   \"revFormat\": function() { return /* binding */ revFormat; },\n/* harmony export */   \"tokenRegex\": function() { return /* binding */ tokenRegex; },\n/* harmony export */   \"formats\": function() { return /* binding */ formats; }\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ \"./node_modules/flatpickr/dist/esm/utils/index.js\");\n\r\nconst doNothing = () => undefined;\r\nconst monthToStr = (monthNumber, shorthand, locale) => locale.months[shorthand ? \"shorthand\" : \"longhand\"][monthNumber];\r\nconst revFormat = {\r\n    D: doNothing,\r\n    F: function (dateObj, monthName, locale) {\r\n        dateObj.setMonth(locale.months.longhand.indexOf(monthName));\r\n    },\r\n    G: (dateObj, hour) => {\r\n        dateObj.setHours(parseFloat(hour));\r\n    },\r\n    H: (dateObj, hour) => {\r\n        dateObj.setHours(parseFloat(hour));\r\n    },\r\n    J: (dateObj, day) => {\r\n        dateObj.setDate(parseFloat(day));\r\n    },\r\n    K: (dateObj, amPM, locale) => {\r\n        dateObj.setHours((dateObj.getHours() % 12) +\r\n            12 * (0,_utils__WEBPACK_IMPORTED_MODULE_0__.int)(new RegExp(locale.amPM[1], \"i\").test(amPM)));\r\n    },\r\n    M: function (dateObj, shortMonth, locale) {\r\n        dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));\r\n    },\r\n    S: (dateObj, seconds) => {\r\n        dateObj.setSeconds(parseFloat(seconds));\r\n    },\r\n    U: (_, unixSeconds) => new Date(parseFloat(unixSeconds) * 1000),\r\n    W: function (dateObj, weekNum, locale) {\r\n        const weekNumber = parseInt(weekNum);\r\n        const date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);\r\n        date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);\r\n        return date;\r\n    },\r\n    Y: (dateObj, year) => {\r\n        dateObj.setFullYear(parseFloat(year));\r\n    },\r\n    Z: (_, ISODate) => new Date(ISODate),\r\n    d: (dateObj, day) => {\r\n        dateObj.setDate(parseFloat(day));\r\n    },\r\n    h: (dateObj, hour) => {\r\n        dateObj.setHours(parseFloat(hour));\r\n    },\r\n    i: (dateObj, minutes) => {\r\n        dateObj.setMinutes(parseFloat(minutes));\r\n    },\r\n    j: (dateObj, day) => {\r\n        dateObj.setDate(parseFloat(day));\r\n    },\r\n    l: doNothing,\r\n    m: (dateObj, month) => {\r\n        dateObj.setMonth(parseFloat(month) - 1);\r\n    },\r\n    n: (dateObj, month) => {\r\n        dateObj.setMonth(parseFloat(month) - 1);\r\n    },\r\n    s: (dateObj, seconds) => {\r\n        dateObj.setSeconds(parseFloat(seconds));\r\n    },\r\n    u: (_, unixMillSeconds) => new Date(parseFloat(unixMillSeconds)),\r\n    w: doNothing,\r\n    y: (dateObj, year) => {\r\n        dateObj.setFullYear(2000 + parseFloat(year));\r\n    },\r\n};\r\nconst tokenRegex = {\r\n    D: \"(\\\\w+)\",\r\n    F: \"(\\\\w+)\",\r\n    G: \"(\\\\d\\\\d|\\\\d)\",\r\n    H: \"(\\\\d\\\\d|\\\\d)\",\r\n    J: \"(\\\\d\\\\d|\\\\d)\\\\w+\",\r\n    K: \"\",\r\n    M: \"(\\\\w+)\",\r\n    S: \"(\\\\d\\\\d|\\\\d)\",\r\n    U: \"(.+)\",\r\n    W: \"(\\\\d\\\\d|\\\\d)\",\r\n    Y: \"(\\\\d{4})\",\r\n    Z: \"(.+)\",\r\n    d: \"(\\\\d\\\\d|\\\\d)\",\r\n    h: \"(\\\\d\\\\d|\\\\d)\",\r\n    i: \"(\\\\d\\\\d|\\\\d)\",\r\n    j: \"(\\\\d\\\\d|\\\\d)\",\r\n    l: \"(\\\\w+)\",\r\n    m: \"(\\\\d\\\\d|\\\\d)\",\r\n    n: \"(\\\\d\\\\d|\\\\d)\",\r\n    s: \"(\\\\d\\\\d|\\\\d)\",\r\n    u: \"(.+)\",\r\n    w: \"(\\\\d\\\\d|\\\\d)\",\r\n    y: \"(\\\\d{2})\",\r\n};\r\nconst formats = {\r\n    Z: (date) => date.toISOString(),\r\n    D: function (date, locale, options) {\r\n        return locale.weekdays.shorthand[formats.w(date, locale, options)];\r\n    },\r\n    F: function (date, locale, options) {\r\n        return monthToStr(formats.n(date, locale, options) - 1, false, locale);\r\n    },\r\n    G: function (date, locale, options) {\r\n        return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.pad)(formats.h(date, locale, options));\r\n    },\r\n    H: (date) => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.pad)(date.getHours()),\r\n    J: function (date, locale) {\r\n        return locale.ordinal !== undefined\r\n            ? date.getDate() + locale.ordinal(date.getDate())\r\n            : date.getDate();\r\n    },\r\n    K: (date, locale) => locale.amPM[(0,_utils__WEBPACK_IMPORTED_MODULE_0__.int)(date.getHours() > 11)],\r\n    M: function (date, locale) {\r\n        return monthToStr(date.getMonth(), true, locale);\r\n    },\r\n    S: (date) => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.pad)(date.getSeconds()),\r\n    U: (date) => date.getTime() / 1000,\r\n    W: function (date, _, options) {\r\n        return options.getWeek(date);\r\n    },\r\n    Y: (date) => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.pad)(date.getFullYear(), 4),\r\n    d: (date) => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.pad)(date.getDate()),\r\n    h: (date) => (date.getHours() % 12 ? date.getHours() % 12 : 12),\r\n    i: (date) => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.pad)(date.getMinutes()),\r\n    j: (date) => date.getDate(),\r\n    l: function (date, locale) {\r\n        return locale.weekdays.longhand[date.getDay()];\r\n    },\r\n    m: (date) => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.pad)(date.getMonth() + 1),\r\n    n: (date) => date.getMonth() + 1,\r\n    s: (date) => date.getSeconds(),\r\n    u: (date) => date.getTime(),\r\n    w: (date) => date.getDay(),\r\n    y: (date) => String(date.getFullYear()).substring(2),\r\n};\r\n\n\n//# sourceURL=webpack://falcon/./node_modules/flatpickr/dist/esm/utils/formatting.js?");

/***/ }),

/***/ "./node_modules/flatpickr/dist/esm/utils/index.js":
/*!********************************************************!*\
  !*** ./node_modules/flatpickr/dist/esm/utils/index.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"pad\": function() { return /* binding */ pad; },\n/* harmony export */   \"int\": function() { return /* binding */ int; },\n/* harmony export */   \"debounce\": function() { return /* binding */ debounce; },\n/* harmony export */   \"arrayify\": function() { return /* binding */ arrayify; }\n/* harmony export */ });\nconst pad = (number, length = 2) => `000${number}`.slice(length * -1);\r\nconst int = (bool) => (bool === true ? 1 : 0);\r\nfunction debounce(fn, wait) {\r\n    let t;\r\n    return function () {\r\n        clearTimeout(t);\r\n        t = setTimeout(() => fn.apply(this, arguments), wait);\r\n    };\r\n}\r\nconst arrayify = (obj) => obj instanceof Array ? obj : [obj];\r\n\n\n//# sourceURL=webpack://falcon/./node_modules/flatpickr/dist/esm/utils/index.js?");

/***/ }),

/***/ "./node_modules/flatpickr/dist/esm/utils/polyfills.js":
/*!************************************************************!*\
  !*** ./node_modules/flatpickr/dist/esm/utils/polyfills.js ***!
  \************************************************************/
/***/ (function() {

"use strict";
eval("\r\nif (typeof Object.assign !== \"function\") {\r\n    Object.assign = function (target, ...args) {\r\n        if (!target) {\r\n            throw TypeError(\"Cannot convert undefined or null to object\");\r\n        }\r\n        for (const source of args) {\r\n            if (source) {\r\n                Object.keys(source).forEach((key) => (target[key] = source[key]));\r\n            }\r\n        }\r\n        return target;\r\n    };\r\n}\r\n\n\n//# sourceURL=webpack://falcon/./node_modules/flatpickr/dist/esm/utils/polyfills.js?");

/***/ }),

/***/ "./node_modules/flatpickr/dist/l10n/bn.js":
/*!************************************************!*\
  !*** ./node_modules/flatpickr/dist/l10n/bn.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("(function (global, factory) {\r\n   true ? factory(exports) :\r\n  0;\r\n}(this, (function (exports) { 'use strict';\r\n\r\n  var fp = typeof window !== \"undefined\" && window.flatpickr !== undefined\r\n      ? window.flatpickr\r\n      : {\r\n          l10ns: {},\r\n      };\r\n  var Bangla = {\r\n      weekdays: {\r\n          shorthand: [\"রবি\", \"সোম\", \"মঙ্গল\", \"বুধ\", \"বৃহস্পতি\", \"শুক্র\", \"শনি\"],\r\n          longhand: [\r\n              \"রবিবার\",\r\n              \"সোমবার\",\r\n              \"মঙ্গলবার\",\r\n              \"বুধবার\",\r\n              \"বৃহস্পতিবার\",\r\n              \"শুক্রবার\",\r\n              \"শনিবার\",\r\n          ],\r\n      },\r\n      months: {\r\n          shorthand: [\r\n              \"জানু\",\r\n              \"ফেব্রু\",\r\n              \"মার্চ\",\r\n              \"এপ্রিল\",\r\n              \"মে\",\r\n              \"জুন\",\r\n              \"জুলাই\",\r\n              \"আগ\",\r\n              \"সেপ্টে\",\r\n              \"অক্টো\",\r\n              \"নভে\",\r\n              \"ডিসে\",\r\n          ],\r\n          longhand: [\r\n              \"জানুয়ারী\",\r\n              \"ফেব্রুয়ারী\",\r\n              \"মার্চ\",\r\n              \"এপ্রিল\",\r\n              \"মে\",\r\n              \"জুন\",\r\n              \"জুলাই\",\r\n              \"আগস্ট\",\r\n              \"সেপ্টেম্বর\",\r\n              \"অক্টোবর\",\r\n              \"নভেম্বর\",\r\n              \"ডিসেম্বর\",\r\n          ],\r\n      },\r\n  };\r\n  fp.l10ns.bn = Bangla;\r\n  var bn = fp.l10ns;\r\n\r\n  exports.Bangla = Bangla;\r\n  exports.default = bn;\r\n\r\n  Object.defineProperty(exports, '__esModule', { value: true });\r\n\r\n})));\r\n\n\n//# sourceURL=webpack://falcon/./node_modules/flatpickr/dist/l10n/bn.js?");

/***/ }),

/***/ "./src/js/flatpickr.js":
/*!*****************************!*\
  !*** ./src/js/flatpickr.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var flatpickr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! flatpickr */ \"./node_modules/flatpickr/dist/esm/index.js\");\n/* harmony import */ var flatpickr_dist_l10n_bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! flatpickr/dist/l10n/bn.js */ \"./node_modules/flatpickr/dist/l10n/bn.js\");\n/* harmony import */ var flatpickr_dist_l10n_bn_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(flatpickr_dist_l10n_bn_js__WEBPACK_IMPORTED_MODULE_1__);\n\r\n\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                                    Utils                                   */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst camelize = str => {\r\n  const text = str.replace(/[-_\\s.]+(.)?/g, (_, c) => (c ? c.toUpperCase() : ''));\r\n  return `${text.substr(0, 1).toLowerCase()}${text.substr(1)}`;\r\n};\r\n\r\nconst getData = (el, data) => {\r\n  try {\r\n    return JSON.parse(el.dataset[camelize(data)]);\r\n  } catch (e) {\r\n    return el.dataset[camelize(data)];\r\n  }\r\n};\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                                  Flatpickr                                 */\r\n/* -------------------------------------------------------------------------- */\r\n\r\ndocument.querySelectorAll('.datetimepicker').forEach(item => {\r\n  (0,flatpickr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(item, getData(item, 'options'));\r\n});\r\n\n\n//# sourceURL=webpack://falcon/./src/js/flatpickr.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/flatpickr.js");
/******/ 	
/******/ })()
;